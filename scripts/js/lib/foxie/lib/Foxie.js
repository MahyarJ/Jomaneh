var Chain_, Foxie, Styles_, Timing_, array, classic, lazyValues, object, timing, _ref;

Chain_ = require('./el/mixin/Chain_');

timing = require('./timing');

Styles_ = require('./el/mixin/Styles_');

Timing_ = require('./el/mixin/Timing_');

lazyValues = require('./utility/lazyValues');

_ref = require('utila'), classic = _ref.classic, object = _ref.object, array = _ref.array;

timing = require('./timing');

module.exports = classic.mix(Styles_, Chain_, Timing_, Foxie = (function() {
  var self;

  self = Foxie;

  Foxie._nameRx = /^[a-zA-Z\-\_]{1}[a-zA-Z0-9\-\_]*$/;

  Foxie.timing = timing;

  Foxie._parseTag = function(k) {
    var attribs, classes, cls, id, m, name, parts;
    if (!k.match(/^[a-zA-Z0-9\#\-\_\.\[\]\"\'\=\,\s\:]+$/) || k.match(/^[0-9]+/)) {
      throw Error("cannot parse tag `" + k + "`");
    }
    attribs = {};
    parts = {
      name: '',
      attribs: attribs,
      ns: false
    };
    if (k.match(/^svg\:/)) {
      parts.ns = 'http://www.w3.org/2000/svg';
      k = k.substr(4, k.length);
    }
    if (m = k.match(/^([^\.#]+)/)) {
      name = m[1];
      if (!name.match(self._nameRx)) {
        throw Error("tag name `" + name + "` is not valid");
      }
      parts.name = name;
      k = k.substr(name.length, k.length);
    }
    if (m = k.match(/^#([a-zA-Z0-9\-]+)/)) {
      id = m[1];
      if (!id.match(self._nameRx)) {
        throw Error("tag id `" + id + "` is not valid");
      }
      attribs.id = id;
      k = k.substr(id.length + 1, k.length);
    }
    classes = [];
    while (m = k.match(/\.([a-zA-Z0-9\-\_]+)/)) {
      cls = m[1];
      if (!cls.match(self._nameRx)) {
        throw Error("tag class `" + cls + "` is not valid");
      }
      classes.push(cls);
      k = k.replace('.' + cls, '');
    }
    if (classes.length) {
      attribs["class"] = classes.join(" ");
    }
    return parts;
  };

  function Foxie(node) {
    var name, parts, val, _ref1;
    if (!(this instanceof self)) {
      return new self(node);
    }
    if (typeof node === 'string') {
      parts = self._parseTag(node);
      if (parts.name.length === 0) {
        parts.name = 'div';
      }
      if (parts.ns) {
        node = document.createElementNS(parts.ns, parts.name);
      } else {
        node = document.createElement(parts.name);
      }
      _ref1 = parts.attribs;
      for (name in _ref1) {
        val = _ref1[name];
        node.setAttribute(name, val);
      }
    }
    if (!(node instanceof Element)) {
      throw Error("node must be an HTML element.");
    }
    this.node = node;
    if (this._shouldCloneInnerHTML == null) {
      this._shouldCloneInnerHTML = false;
    }
    self.__initMixinsFor(this);
    this._parent = null;
    this._children = [];
    this._customVars = {};
  }

  Foxie.prototype.clone = function(newself) {
    var child, key, newNode, parent, val, _i, _len, _ref1, _ref2, _ref3;
    if (newself == null) {
      newself = Object.create(this.constructor.prototype);
    }
    this._doUpdate();
    newNode = this.node.cloneNode();
    newself.node = newNode;
    newself._children = [];
    if (this._shouldCloneInnerHTML) {
      newself.node.innerHTML = this.node.innerHTML;
    } else {
      _ref1 = this._children;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        child = _ref1[_i];
        child.clone().putIn(newself);
      }
    }
    newself._parent = null;
    if (this._parent != null) {
      parent = this._parent;
    } else {
      parent = (_ref2 = (_ref3 = this.node._parent) != null ? _ref3 : this.node.parentselfement) != null ? _ref2 : null;
    }
    timing.afterFrame((function(_this) {
      return function() {};
    })(this));
    self.__applyClonersFor(this, [newself]);
    for (key in this) {
      val = this[key];
      if (newself[key] !== void 0) {
        continue;
      }
      if (this.hasOwnProperty(key)) {
        newself[key] = object.clone(val, true);
      }
    }
    return newself;
  };

  Foxie.prototype._notYourChildAnymore = function(el) {
    if (!(el instanceof self)) {
      throw Error("`el` must be an instance of `self`");
    }
    array.pluckItem(this._children, el);
    return this;
  };

  Foxie.prototype.putIn = function(el) {
    if (this._parent != null) {
      this._parent._notYourChildAnymore(this);
    }
    if (el instanceof self) {
      el._append(this);
      this._parent = el;
    } else {
      el.appendChild(this.node);
      this._parent = null;
    }
    return this;
  };

  Foxie.prototype.takeOutOfParent = function() {
    if (this._parent != null) {
      this._parent._notYourChildAnymore(this);
    }
    this._parent = null;
    return this;
  };

  Foxie.prototype._append = function(el) {
    var node;
    if (el instanceof self) {
      node = el.node;
      this._children.push(el);
    } else {
      node = el;
    }
    this.node.appendChild(node);
    return this;
  };

  Foxie.prototype.remove = function() {
    if (this._parent != null) {
      this._parent._notYourChildAnymore(this);
    }
    if (this.node.parentNode != null) {
      this.node.parentNode.removeChild(this.node);
    }
    return null;
  };

  Foxie.prototype.quit = function() {
    var child, p, _i, _len, _ref1;
    p = this.node.parentNode;
    if (p != null) {
      p.removeChild(this.node);
    }
    _ref1 = this._children;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      child = _ref1[_i];
      child.quit();
    }
    self.__applyQuittersFor(this);
  };

  Foxie.prototype.each = function(cb) {
    var child, counter, els, i, _interface;
    if (cb == null) {
      cb = null;
    }
    if (cb instanceof Function) {
      i = 0;
      child = null;
      counter = -1;
      while (true) {
        counter++;
        if (child === this._children[i]) {
          i++;
        }
        child = this._children[i];
        if (child == null) {
          break;
        }
        cb.call(this, child, counter);
      }
      return this;
    }
    _interface = this._getNewInterface();
    els = this._children;
    if (els.length !== 0) {
      timing.afterFrame((function(_this) {
        return function() {
          var el, _i, _len;
          for (_i = 0, _len = els.length; _i < _len; _i++) {
            el = els[_i];
            _this._getMethodChain().run(_interface, el);
          }
          return null;
        };
      })(this));
    }
    return _interface;
  };

  Foxie.prototype.get = function(name) {
    return this._customVars[name];
  };

  Foxie.prototype.set = function(name, val) {
    this._customVars[name] = val;
    return this;
  };

  Foxie.prototype.unset = function(name) {
    delete this._customVars[name];
    return this;
  };

  Foxie.prototype.attr = function(name, val) {
    if (val == null) {
      return this.node.getAttribute(name);
    } else {
      this.node.setAttribute(name, val);
    }
    return this;
  };

  Foxie.prototype.removeAttr = function(name) {
    this.node.removeAttribute(name);
    return this;
  };

  Foxie.prototype.innerHTML = function(val) {
    if (val == null) {
      return this.node.innerHTML;
    }
    this.node.innerHTML = val;
    return this;
  };

  Foxie.prototype.computedStyle = function(prop) {
    var comp;
    comp = getComputedStyle(this.node);
    if (prop != null) {
      return comp[prop];
    } else {
      return comp;
    }
  };

  return Foxie;

})());

//# sourceMappingURL=data:application/json;base64,