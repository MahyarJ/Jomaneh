var Fill_;

module.exports = Fill_ = (function() {
  function Fill_() {}

  Fill_.prototype.__initMixinFill = function() {
    this._fromFill = {
      opacity: null
    };
    this._toFill = {
      opacity: null
    };
    this._currentFill = this.el._styleSetter._fill;
  };

  Fill_.prototype.__clonerForFill = function(newTransitioner) {
    newTransitioner._currentFill = newTransitioner.el._styleSetter._fill;
  };

  Fill_.prototype._adjustFromValuesForFill = function() {
    this._fromFill.opacity = this._currentFill.opacity;
  };

  Fill_.prototype._disableTransitionForFill = function() {
    this._toFill.opacity = this._currentFill.opacity;
    this._needsUpdate.opacity = false;
  };

  Fill_.prototype._updateTransitionForFill = function(progress) {
    if (this._needsUpdate.opacity) {
      this._updateOpacity(progress);
    }
  };

  Fill_.prototype.setOpacity = function(d) {
    this._toFill.opacity = d;
    this._needsUpdate.opacity = true;
    this._update();
    return this;
  };

  Fill_.prototype.adjustOpacity = function(d) {
    this._toFill.opacity = this._currentFill.opacity + d;
    this._needsUpdate.opacity = true;
    this._update();
    return this;
  };

  Fill_.prototype._updateOpacity = function(progress) {
    this._styleSetter.setOpacity(this._fromFill.opacity + (this._toFill.opacity - this._fromFill.opacity) * progress);
  };

  return Fill_;

})();

//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"Fill_.js","sourceRoot":"..\\..\\..\\..\\..\\..\\..\\..","sources":["coffee\\lib\\foxie\\lib\\el\\mixin\\transitioner\\mixin\\Fill_.coffee"],"names":[],"mappings":"AAAA,IAAA,KAAA;;A2DAA,M2DAM,C2DAC,O2DAP,G2DAuB;qB2DEtB;;A2DAA,kB2DAA,e2DAA,G2DAiB,S2DAA,G2DAA;A2DEhB,I2DAA,I2DAC,C2DAA,S2DAD,G2DEC;A2DAA,M2DAA,O2DAA,E2DAS,I2DAT;K2DFD,C2DAA;A2DAA,I2DIA,I2DAC,C2DAA,O2DAD,G2DEC;A2DAA,M2DAA,O2DAA,E2DAS,I2DAT;K2DND,C2DAA;A2DAA,I2DQA,I2DAC,C2DAA,Y2DAD,G2DAgB,I2DAC,C2DAA,E2DAE,C2DAC,Y2DAY,C2DAC,K2DRjC,C2DFgB;E2DAA,C2DAjB,C2DAA;;A2DAA,kB2DcA,e2DAA,G2DAiB,S2DAC,e2DAD,G2DAA;A2DEhB,I2DAA,e2DAe,C2DAC,Y2DAhB,G2DA+B,e2DAe,C2DAC,E2DAE,C2DAC,Y2DAY,C2DAC,K2DA/D,C2DFgB;E2DAA,C2DdjB,C2DAA;;A2DAA,kB2DoBA,wB2DAA,G2DA0B,S2DAA,G2DAA;A2DEzB,I2DAA,I2DAC,C2DAA,S2DAS,C2DAC,O2DAX,G2DAqB,I2DAC,C2DAA,Y2DAY,C2DAC,O2DAnC,C2DFyB;E2DAA,C2DpB1B,C2DAA;;A2DAA,kB2D0BA,yB2DAA,G2DA2B,S2DAA,G2DAA;A2DE1B,I2DAA,I2DAC,C2DAA,O2DAO,C2DAC,O2DAT,G2DAmB,I2DAC,C2DAA,Y2DAY,C2DAC,O2DAjC,C2DAA;A2DAA,I2DEA,I2DAC,C2DAA,Y2DAY,C2DAC,O2DAd,G2DAwB,K2DFxB,C2DF0B;E2DAA,C2D1B3B,C2DAA;;A2DAA,kB2DkCA,wB2DAA,G2DA0B,S2DAC,Q2DAD,G2DAA;A2DEzB,I2DAA,I2DAG,I2DAC,C2DAA,Y2DAY,C2DAC,O2DAjB;A2DEC,M2DAA,I2DAC,C2DAA,c2DAD,C2DAgB,Q2DAhB,C2DAA,C2DFD;K2DFyB;E2DAA,C2DlC1B,C2DAA;;A2DAA,kB2D0CA,U2DAA,G2DAY,S2DAC,C2DAD,G2DAA;A2DEX,I2DAA,I2DAC,C2DAA,O2DAO,C2DAC,O2DAT,G2DAmB,C2DAnB,C2DAA;A2DAA,I2DEA,I2DAC,C2DAA,Y2DAY,C2DAC,O2DAd,G2DAwB,I2DFxB,C2DAA;A2DAA,I2DIG,I2DAC,C2DAA,O2DAJ,C2DAA,C2DJA,C2DAA;W2DMA,K2DRW;E2DAA,C2D1CZ,C2DAA;;A2DAA,kB2DoDA,a2DAA,G2DAe,S2DAC,C2DAD,G2DAA;A2DEd,I2DAA,I2DAC,C2DAA,O2DAO,C2DAC,O2DAT,G2DAmB,I2DAC,C2DAA,Y2DAY,C2DAC,O2DAd,G2DAwB,C2DA3C,C2DAA;A2DAA,I2DEA,I2DAC,C2DAA,Y2DAY,C2DAC,O2DAd,G2DAwB,I2DFxB,C2DAA;A2DAA,I2DIG,I2DAC,C2DAA,O2DAJ,C2DAA,C2DJA,C2DAA;W2DMA,K2DRc;E2DAA,C2DpDf,C2DAA;;A2DAA,kB2D8DA,c2DAA,G2DAgB,S2DAC,Q2DAD,G2DAA;A2DEf,I2DAA,I2DAC,C2DAA,Y2DAY,C2DAC,U2DAd,C2DEC,I2DAC,C2DAA,S2DAS,C2DAC,O2DAX,G2DEA,C2DAC,I2DAC,C2DAA,O2DAO,C2DAC,O2DAT,G2DAmB,I2DAC,C2DAA,S2DAS,C2DAC,O2DA/B,C2DAA,G2DA0C,Q2DJ3C,C2DAA,C2DFe;E2DAA,C2D9DhB,C2DAA;;e2DAA;;IAFD,CAAA","sourcesContent":["define ['tween'], (Tween) ->\r\n\r\n\tclass Animator\r\n\r\n\t\tconstructor: ->\r\n\r\n\t\t\t@from = \r\n\r\n\t\t\t\t# Translate Parameters\r\n\t\t\t\ttX: 0\r\n\t\t\t\ttY: 0\r\n\t\t\t\ttZ: 0\r\n\r\n\t\t\t\t# Rotation Parameters\r\n\t\t\t\trX: 0\r\n\t\t\t\trY: 0\r\n\t\t\t\trZ: 0\r\n\r\n\t\t\t\t# Scale Parameters\t\t\t\t\r\n\t\t\t\tsX: 1\r\n\t\t\t\tsY: 1\r\n\t\t\t\tsZ: 1\r\n\r\n\t\t\t\t# Opacity\r\n\t\t\t\toP: 1\r\n\r\n\t\t\t@to =\r\n\t\t\t\t# Translate Parameters\r\n\t\t\t\ttX: 0\r\n\t\t\t\ttY: 0\r\n\t\t\t\ttZ: 0\r\n\r\n\t\t\t\t# Rotation Parameters\r\n\t\t\t\trX: 0\r\n\t\t\t\trY: 0\r\n\t\t\t\trZ: 0\r\n\r\n\t\t\t\t# Scale Parameters\t\t\t\t\r\n\t\t\t\tsX: 1\r\n\t\t\t\tsY: 1\r\n\t\t\t\tsZ: 1\r\n\r\n\t\t\t\t# Opacity\r\n\t\t\t\toP: 1\r\n\r\n\t\tfromState: (param) ->\r\n\r\n\t\t\t@from = \r\n\t\t\t\r\n\t\t\t\t# Translate Parameters\r\n\t\t\t\ttX: param.tX || 0\r\n\t\t\t\ttY: param.tY || 0\r\n\t\t\t\ttZ: param.tZ || 0\r\n\r\n\t\t\t\t# Rotation Parameters\r\n\t\t\t\trX: param.rX || 0\r\n\t\t\t\trY: param.rY || 0\r\n\t\t\t\trZ: param.rZ || 0\r\n\r\n\t\t\t\t# Scale Parameters\t\t\t\t\r\n\t\t\t\tsX: param.sX+.001 || 1\r\n\t\t\t\tsY: param.sY+.001 || 1\r\n\t\t\t\tsZ: param.sZ+.001 || 1\r\n\r\n\t\t\t\t# Opacity\r\n\t\t\t\toP: param.oP+.001 || 1\r\n\t\t\t\r\n\t\ttoState: (param) ->\r\n\t\t\t\r\n\t\t\t@to =\r\n\t\t\t\t# Translate Parameters\r\n\t\t\t\ttX: param.tX || 0\r\n\t\t\t\ttY: param.tY || 0\r\n\t\t\t\ttZ: param.tZ || 0\r\n\r\n\t\t\t\t# Rotation Parameters\r\n\t\t\t\trX: param.rX || 0\r\n\t\t\t\trY: param.rY || 0\r\n\t\t\t\trZ: param.rZ || 0\r\n\r\n\t\t\t\t# Scale Parameters\t\t\t\t\r\n\t\t\t\tsX: param.sX+.001 || 1\r\n\t\t\t\tsY: param.sY+.001 || 1\r\n\t\t\t\tsZ: param.sZ+.001 || 1\r\n\r\n\t\t\t\t# Opacity\r\n\t\t\t\toP: param.oP+.001 || 1\r\n\r\n\t\tstart: (el, dur, del) ->\r\n\r\n\t\t\t@duration = dur || 1000\r\n\t\t\t@delay = del || 0\r\n\r\n\t\t\tstartCordination = [\r\n\r\n\t\t\t\t@from.tX,\r\n\t\t\t\t@from.tY,\r\n\t\t\t\t@from.tZ\r\n\r\n\t\t\t]\r\n\r\n\t\t\tfinishCordination = [\r\n\r\n\t\t\t\t@to.tX,\r\n\t\t\t\t@to.tY,\r\n\t\t\t\t@to.tZ\r\n\r\n\t\t\t]\r\n\r\n\t\t\t@mover = new Tween el, startCordination, finishCordination, @duration, @delay\r\n\t\t\t\r\n\t\t\tdo @mover.setStart\r\n\t\t\t\r\n\t\t\tdo @animate\r\n\r\n\t\tanimate: ->\r\n\r\n\t\t\t\t# progress = this.mover.calculateProgress('quint')\r\n\t\t\t\tprogress = @mover.calculateProgress 'quint' \r\n\r\n\t\t\t\tcurrentX  = @from.tX + (@to.tX - @from.tX) * progress\r\n\t\t\t\tcurrentY  = @from.tY + (@to.tY - @from.tY) * progress\r\n\t\t\t\tcurrentZ  = @from.tZ + (@to.tZ - @from.tZ) * progress\r\n\t\t\t\tcurrentRX = @from.rX + (@to.rX - @from.rX) * progress\r\n\t\t\t\tcurrentRY = @from.rY + (@to.rY - @from.rY) * progress\r\n\t\t\t\tcurrentRZ = @from.rZ + (@to.rZ - @from.rZ) * progress\r\n\t\t\t\tcurrentSX = @from.sX + (@to.sX - @from.sX) * progress\r\n\t\t\t\tcurrentSY = @from.sY + (@to.sY - @from.sY) * progress\r\n\t\t\t\tcurrentSZ = @from.sZ + (@to.sZ - @from.sZ) * progress\r\n\t\t\t\tcurrentOP = @from.oP + (@to.oP - @from.oP) * progress\r\n\r\n\t\t\t\t@mover.el.style.webkitTransform = \"translate3d(#{currentX.toFixed(5)}px, #{currentY.toFixed(5)}px, #{currentZ.toFixed(5)}px) \" +\r\n\t\t\t\t\t\t\t\t\t\t\t\t  \"perspective(10000) \" +\r\n\t\t\t\t\t\t\t\t\t\t\t\t  \"scale3d(#{currentSX.toFixed(5)}, #{currentSY.toFixed(5)}, #{currentSZ.toFixed(5)}) \" +\r\n\t\t\t\t\t\t\t\t\t\t\t\t  \"rotate3d(1, 0, 0, #{currentRX.toFixed(5)}deg) \" +\r\n\t\t\t\t\t\t\t\t\t\t\t\t  \"rotate3d(0, 1, 0, #{currentRY.toFixed(5)}deg) \" +\r\n\t\t\t\t\t\t\t\t\t\t\t\t  \"rotate3d(0, 0, 1, #{currentRZ.toFixed(5)}deg) \"\r\n\t\t\t\t\t\t\t\t\t\t\t\t  \r\n\t\t\t\t\t\t\t\t\t\t\t\t  \r\n\t\t\t\t@mover.el.style.opacity = currentOP;\r\n\r\n\t\t\t\tif progress < 1\r\n\r\n\t\t\t\t\twebkitRequestAnimationFrame =>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tdo @animate","define ->\r\n\r\n\traf = requestAnimationFrame ? mozRequestAnimationFrame\r\n\r\n\tclass EventLoop\r\n\r\n\t\tconstructor: ->\r\n\r\n\t\t\t@_callbacks = []\r\n\r\n\t\t\t@_boundFireFrame = @_fireFrame.bind @\r\n\r\n\t\tanimate: ->\r\n\r\n\t\t\traf @_boundFireFrame\r\n\r\n\t\t\t@\r\n\r\n\t\tonNextFrame: (cb) ->\r\n\r\n\t\t\t@_callbacks.push cb\r\n\r\n\t\t\t@\r\n\r\n\t\t_fireFrame: ->\r\n\r\n\t\t\tcbs = @_callbacks\r\n\r\n\t\t\t@_callbacks = []\r\n\r\n\t\t\tfor cb in cbs\r\n\r\n\t\t\t\tdo cb\r\n\r\n\t\t\tdo @animate","define ->\r\n\r\n\tclass Keyboard\r\n\r\n\t\tconstructor: ->\r\n\r\n\t\t\t@downListeners = {}\r\n\r\n\t\t\t@upListeners = {}\r\n\r\n\t\t\t@activeKeys = {}\r\n\r\n\t\t\tdocument.addEventListener 'keydown', (e) =>\r\n\r\n\t\t\t\tkeyCode = e.keyCode\r\n\r\n\t\t\t\treturn if not @downListeners[keyCode]\r\n\r\n\t\t\t\treturn if @activeKeys[keyCode]\r\n\r\n\t\t\t\t@activeKeys[keyCode] = on\r\n\r\n\t\t\t\t@downListeners[keyCode] e\r\n\r\n\t\t\tdocument.addEventListener 'keyup', (e) =>\r\n\r\n\t\t\t\tkeyCode = e.keyCode\r\n\r\n\t\t\t\treturn if not @upListeners[keyCode]\r\n\t\t\t\t\r\n\t\t\t\tif @activeKeys[keyCode]\r\n\r\n\t\t\t\t\t@activeKeys[keyCode] = off\r\n\r\n\r\n\t\t\t\t@upListeners[keyCode] e\r\n\r\n\r\n\r\n\r\n\t\tonDown: (keyCode, func) ->\r\n\r\n\t\t\t@downListeners[keyCode] = func\r\n\t\t\t\r\n\t\tonUp: (keyCode, func) ->\r\n\r\n\t\t\t@upListeners[keyCode] = func\r\n\r\n","if typeof define isnt 'function' then define = require('amdefine')(module)\r\n\r\ndefine ->\r\n\r\n\tclass Test","define ->\r\n\r\n\tTransitions =\r\n\r\n\t\tlinear: (p) -> p\r\n\r\n\tTransitions.define = (name, func) ->\r\n\r\n\t\tif typeof name is 'object'\r\n\r\n\t\t\tTransitions.define _name, _func for _name, _func of name\r\n\r\n\t\t\treturn\r\n\r\n\t\tTransitions[name] =\r\n\r\n\t\t\teaseIn: func\r\n\r\n\t\t\teaseOut: (p) -> 1 - func( 1 - p )\r\n\r\n\t\t\teaseInOut: (p) ->\r\n\r\n\t\t\t\tif p <= 0.5\r\n\t\t\t\t\treturn 0.5 * func( p * 2 )\r\n\t\t\t\telse\r\n\t\t\t\t\treturn 0.5 * ( 2 - func( 2 * (1 - p) ) )\r\n\t\r\n\tTransitions.define\r\n\r\n\t\tquad: \t(p) -> Math.pow p, 2\r\n\t\t\r\n\t\tcubic: \t(p) -> Math.pow p, 3\r\n\r\n\t\tquart: \t(p) -> Math.pow p, 4\r\n\r\n\t\tquint: \t(p) -> Math.pow p, 5\r\n\r\n\t\texpo: \t(p) -> Math.pow 2, 8 * (p - 1)\r\n\r\n\t\tcirc:\t(p) -> 1 - Math.sin Math.cos p\r\n\r\n\t\tsine:\t(p) -> 1 - Math.cos p * Math.PI / 2\r\n\r\n\tTransitions\r\n","define ['transitions'], (Transitions) ->\r\n\r\n\tclass Tween\r\n\r\n\t\tconstructor: (@el, @from, @to, @duration, @delay) ->\r\n\r\n\t\t\t\r\n\t\tsetStart: ->\r\n\r\n\t\t\t@startTime = Date.now() + @delay\r\n\t\t\t\r\n\t\tcalculateProgress: (@action) ->\r\n\r\n\t\t\tnow = Date.now()\r\n\r\n\t\t\tif (now - @startTime) < 0\r\n\r\n\t\t\t\tprogress = 0\r\n\r\n\t\t\telse\r\n\r\n\t\t\t\tprogress = (now - @startTime) / @duration\r\n\r\n\t\t\t@createCurve progress # this.createCurve(progress)\r\n\r\n\t\tcreateCurve: (progressRatio) ->\r\n\r\n\t\t\tif @action is 'quint'\r\n\t\t\t\r\n\t\t\t\t__result = Transitions.quint.easeOut progressRatio\r\n\t\t\t\r\n\t\t\tif @action is 'cosine'\r\n\r\n\t\t\t\t__result = Math.cos progressRatio * Math.PI / 2\r\n\r\n\t\t\t__result","define ->\r\n\r\n\tclass Vector\r\n\r\n\t\tconstructor: (@x, @y) ->","# code on:\r\n\r\nwindow.requestAnimationFrame = requestAnimationFrame || webkitRequestAnimationFrame || mozRequestAnimationFrame || (cb) ->\r\n\r\n\tsetTimeout cb, 16\r\n\r\nsky = document.querySelector '.sky'\r\n\r\ncloudBack = document.querySelector '.cloud-back'\r\n\r\ncloud = document.querySelector '.cloud'\r\n\r\nlogo = document.querySelector '.logo'\r\n\r\nlogo.style.opacity = 0\r\n\r\nlogo.style.webkitTransform = \"translateY(200px) rotateX(-80deg)\"\r\n\r\nconsole.log cloudBack\r\n\r\ni = 1\r\n\r\nj = 1\r\n\r\n# setTimeout =>\r\n\r\n# \tlogo.style.webkitTransition = \"all 4s\"\r\n\r\n# \tlogo.style.webkitTransform = \"translateY(1px) rotateX(1deg)\"\r\n\r\n# \tlogo.style.opacity = 1\r\n\r\n# , 5000\r\n\r\nlabelI = document.getElementById \"text-i\"\r\n\r\nlabelJ = document.getElementById \"text-j\"\r\n\r\n\r\ndo moveClouds = ->\r\n\r\n\t# if i < 900\r\n\r\n\t\t# cloud.style.left = parseInt(getComputedStyle(cloud).left) - 2 + 'px'\r\n\r\n\t\t# cloudBack.style.left = parseInt(getComputedStyle(cloudBack).left) - 1 + 'px'\r\n\r\n\tcloud.style.webkitTransform = \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\r\n\tcloudBack.style.webkitTransform = \"translateX(#{-j}px)\"\r\n\r\n\t# if i > 5400\r\n\r\n\t# \tcloud.style.webkitTransform = \"scaleX(-1) translateX(0)\"\r\n\r\n\t# \ti = 1\r\n\r\n\t# if j > 400\r\n\r\n\t# \tcloudBack.style.webkitTransform = \"translateX(0)\"\r\n\r\n\t# \tj = 1\r\n\r\n\r\n\t\t# cloud.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t# cloudBack.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t# cloud.style.opacity = 0\r\n\r\n\t\t# cloudBack.style.opacity = 0\r\n\r\n\tlabelI.value = i\r\n\r\n\tlabelJ.value = j\r\n\r\n\ti++\r\n\r\n\tj++\r\n\r\n\t# cloud.style.webkitTransition = \"16\"\r\n\r\n\trequestAnimationFrame 16\r\n\r\n\r\n","# Preparing for the tests\r\namdefine = require('./amdefine.js')(module)\r\npath = require 'path'\r\n\r\npathToLib = path.resolve __dirname, '../js/lib'\r\n\r\n# To load the dependencies in each test\r\nglobal.spec = (dependencies, func) ->\r\n\r\n\t# Resolve paths for dependencies\r\n\tresolvedDependencies = dependencies.map (addr) ->\r\n\r\n\t\tpath.resolve pathToLib, addr\r\n\r\n\tamdefine resolvedDependencies, func\r\n\r\n# The lovely should.js framework\r\nglobal.should = require 'should'\r\n\r\n# We're gonna need assert\r\nassert = require 'assert'\r\n\r\n# should.js doesn't do deep equal.\r\nArray::shouldEqual = (b, msg = '') ->\r\n\r\n\tif msg\r\n\r\n\t\tmsg = '| ' + msg\r\n\r\n\tassert.deepEqual @, b, \"The two arrays are not equal \" + msg","# code on:\r\n\r\nwindow.requestAnimationFrame = requestAnimationFrame || webkitRequestAnimationFrame || mozRequestAnimationFrame || (cb) ->\r\n\r\n\tsetTimeout cb, 16\r\n\r\nsky = document.querySelector '.sky'\r\n\r\ncloudBack = document.querySelector '.cloud-back'\r\n\r\ncloud = document.querySelector '.cloud'\r\n\r\nlogo = document.querySelector '.logo'\r\n\r\nlogo.style.opacity = 0\r\n\r\nlogo.style.webkitTransform = \"translateY(200px) rotateX(-80deg)\"\r\n\r\ni = 1\r\n\r\nj = 1\r\n\r\n# setTimeout =>\r\n\r\n# \tlogo.style.webkitTransition = \"all 4s\"\r\n\r\n# \tlogo.style.webkitTransform = \"translateY(1px) rotateX(1deg)\"\r\n\r\n# \tlogo.style.opacity = 1\r\n\r\n# , 5000\r\n\r\nlabelI = document.getElementById \"text-i\"\r\n\r\nlabelJ = document.getElementById \"text-j\"\r\n\r\n\r\ndo moveClouds = ->\r\n\r\n\t# if i < 900\r\n\r\n\t\t# cloud.style.left = parseInt(getComputedStyle(cloud).left) - 2 + 'px'\r\n\r\n\t\t# cloudBack.style.left = parseInt(getComputedStyle(cloudBack).left) - 1 + 'px'\r\n\r\n\tcloud.style.webkitTransform = \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\r\n\tcloudBack.style.webkitTransform = \"translateX(#{-j}px)\"\r\n\r\n\t# if i > 5400\r\n\r\n\t# \tcloud.style.webkitTransform = \"scaleX(-1) translateX(0)\"\r\n\r\n\t# \ti = 1\r\n\r\n\t# if j > 400\r\n\r\n\t# \tcloudBack.style.webkitTransform = \"translateX(0)\"\r\n\r\n\t# \tj = 1\r\n\r\n\r\n\t\t# cloud.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t# cloudBack.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t# cloud.style.opacity = 0\r\n\r\n\t\t# cloudBack.style.opacity = 0\r\n\r\n\tlabelI.value = i\r\n\r\n\tlabelJ.value = j\r\n\r\n\ti++\r\n\r\n\tj++\r\n\r\n\t# cloud.style.webkitTransition = \"16\"\r\n\r\n\trequestAnimationFrame 16\r\n\r\n\r\n","# code on:\r\n\r\nwindow.requestAnimationFrame = requestAnimationFrame || webkitRequestAnimationFrame || mozRequestAnimationFrame || (cb) ->\r\n\r\n\tsetTimeout cb, 16\r\n\r\nsky = document.querySelector '.sky'\r\n\r\ncloudBack = document.querySelector '.cloud-back'\r\n\r\ncloud = document.querySelector '.cloud'\r\n\r\nlogo = document.querySelector '.logo'\r\n\r\nlogo.style.opacity = 0\r\n\r\nlogo.style.webkitTransform = \"translateY(200px) rotateX(-80deg)\"\r\n\r\ni = 1\r\n\r\nj = 1\r\n\r\n# setTimeout =>\r\n\r\n# \tlogo.style.webkitTransition = \"all 4s\"\r\n\r\n# \tlogo.style.webkitTransform = \"translateY(1px) rotateX(1deg)\"\r\n\r\n# \tlogo.style.opacity = 1\r\n\r\n# , 5000\r\n\r\nlabelI = document.getElementById \"text-i\"\r\n\r\nlabelJ = document.getElementById \"text-j\"\r\n\r\n\r\ndo moveClouds = ->\r\n\r\n\t# if i < 900\r\n\r\n\t\t# cloud.style.left = parseInt(getComputedStyle(cloud).left) - 2 + 'px'\r\n\r\n\t\t# cloudBack.style.left = parseInt(getComputedStyle(cloudBack).left) - 1 + 'px'\r\n\r\n\tcloud.style.webkitTransform = \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\r\n\tcloudBack.style.webkitTransform = \"translateX(#{-j}px)\"\r\n\r\n\t# if i > 5400\r\n\r\n\t# \tcloud.style.webkitTransform = \"scaleX(-1) translateX(0)\"\r\n\r\n\t# \ti = 1\r\n\r\n\t# if j > 400\r\n\r\n\t# \tcloudBack.style.webkitTransform = \"translateX(0)\"\r\n\r\n\t# \tj = 1\r\n\r\n\r\n\t\t# cloud.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t# cloudBack.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t# cloud.style.opacity = 0\r\n\r\n\t\t# cloudBack.style.opacity = 0\r\n\r\n\tlabelI.value = i\r\n\r\n\tlabelJ.value = j\r\n\r\n\ti++\r\n\r\n\tj++\r\n\r\n\t# cloud.style.webkitTransition = \"16\"\r\n\r\n\trequestAnimationFrame\r\n\r\n\r\n","# code on:\r\n\r\nwindow.requestAnimationFrame = requestAnimationFrame || webkitRequestAnimationFrame || mozRequestAnimationFrame || (cb) ->\r\n\r\n\tsetTimeout cb, 16\r\n\r\nsky = document.querySelector '.sky'\r\n\r\ncloudBack = document.querySelector '.cloud-back'\r\n\r\ncloud = document.querySelector '.cloud'\r\n\r\nlogo = document.querySelector '.logo'\r\n\r\nlogo.style.opacity = 0\r\n\r\nlogo.style.webkitTransform = \"translateY(200px) rotateX(-80deg)\"\r\n\r\ni = 1\r\n\r\nj = 1\r\n\r\n# setTimeout =>\r\n\r\n# \tlogo.style.webkitTransition = \"all 4s\"\r\n\r\n# \tlogo.style.webkitTransform = \"translateY(1px) rotateX(1deg)\"\r\n\r\n# \tlogo.style.opacity = 1\r\n\r\n# , 5000\r\n\r\nlabelI = document.getElementById \"text-i\"\r\n\r\nlabelJ = document.getElementById \"text-j\"\r\n\r\n\r\ndo moveClouds = ->\r\n\r\n\t# if i < 900\r\n\r\n\t\t# cloud.style.left = parseInt(getComputedStyle(cloud).left) - 2 + 'px'\r\n\r\n\t\t# cloudBack.style.left = parseInt(getComputedStyle(cloudBack).left) - 1 + 'px'\r\n\r\n\tcloud.style.webkitTransform = \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\r\n\tcloudBack.style.webkitTransform = \"translateX(#{-j}px)\"\r\n\r\n\t# if i > 5400\r\n\r\n\t# \tcloud.style.webkitTransform = \"scaleX(-1) translateX(0)\"\r\n\r\n\t# \ti = 1\r\n\r\n\t# if j > 400\r\n\r\n\t# \tcloudBack.style.webkitTransform = \"translateX(0)\"\r\n\r\n\t# \tj = 1\r\n\r\n\r\n\t\t# cloud.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t# cloudBack.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t# cloud.style.opacity = 0\r\n\r\n\t\t# cloudBack.style.opacity = 0\r\n\r\n\tlabelI.value = i\r\n\r\n\tlabelJ.value = j\r\n\r\n\ti++\r\n\r\n\tj++\r\n\r\n\t# cloud.style.webkitTransition = \"16\"\r\n\r\n\tdo requestAnimationFrame\r\n\r\n\r\n","# code on:\r\n\r\nwindow.requestAnimationFrame = requestAnimationFrame || webkitRequestAnimationFrame || mozRequestAnimationFrame || (cb) ->\r\n\r\n\tsetTimeout cb, 16\r\n\r\nsky = document.querySelector '.sky'\r\n\r\ncloudBack = document.querySelector '.cloud-back'\r\n\r\ncloud = document.querySelector '.cloud'\r\n\r\nlogo = document.querySelector '.logo'\r\n\r\nlogo.style.opacity = 0\r\n\r\nlogo.style.webkitTransform = \"translateY(200px) rotateX(-80deg)\"\r\n\r\ni = 1\r\n\r\nj = 1\r\n\r\n# setTimeout =>\r\n\r\n# \tlogo.style.webkitTransition = \"all 4s\"\r\n\r\n# \tlogo.style.webkitTransform = \"translateY(1px) rotateX(1deg)\"\r\n\r\n# \tlogo.style.opacity = 1\r\n\r\n# , 5000\r\n\r\nlabelI = document.getElementById \"text-i\"\r\n\r\nlabelJ = document.getElementById \"text-j\"\r\n\r\n\r\ndo moveClouds = ->\r\n\r\n\t# if i < 900\r\n\r\n\t\t# cloud.style.left = parseInt(getComputedStyle(cloud).left) - 2 + 'px'\r\n\r\n\t\t# cloudBack.style.left = parseInt(getComputedStyle(cloudBack).left) - 1 + 'px'\r\n\r\n\tcloud.style.webkitTransform = \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\r\n\tcloudBack.style.webkitTransform = \"translateX(#{-j}px)\"\r\n\r\n\t# if i > 5400\r\n\r\n\t# \tcloud.style.webkitTransform = \"scaleX(-1) translateX(0)\"\r\n\r\n\t# \ti = 1\r\n\r\n\t# if j > 400\r\n\r\n\t# \tcloudBack.style.webkitTransform = \"translateX(0)\"\r\n\r\n\t# \tj = 1\r\n\r\n\r\n\t\t# cloud.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t# cloudBack.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t# cloud.style.opacity = 0\r\n\r\n\t\t# cloudBack.style.opacity = 0\r\n\r\n\tlabelI.value = i\r\n\r\n\tlabelJ.value = j\r\n\r\n\ti++\r\n\r\n\tj++\r\n\r\n\t# cloud.style.webkitTransition = \"16\"\r\n\r\n\tdo requestAnimationFrame moveClouds\r\n\r\n\r\n","# code on:\r\n\r\nwindow.requestAnimationFrame = requestAnimationFrame || webkitRequestAnimationFrame || mozRequestAnimationFrame || (cb) ->\r\n\r\n\tsetTimeout cb, 16\r\n\r\nsky = document.querySelector '.sky'\r\n\r\ncloudBack = document.querySelector '.cloud-back'\r\n\r\ncloud = document.querySelector '.cloud'\r\n\r\nlogo = document.querySelector '.logo'\r\n\r\nlogo.style.opacity = 0\r\n\r\nlogo.style.webkitTransform = \"translateY(200px) rotateX(-80deg)\"\r\n\r\ni = 1\r\n\r\nj = 1\r\n\r\n# setTimeout =>\r\n\r\n# \tlogo.style.webkitTransition = \"all 4s\"\r\n\r\n# \tlogo.style.webkitTransform = \"translateY(1px) rotateX(1deg)\"\r\n\r\n# \tlogo.style.opacity = 1\r\n\r\n# , 5000\r\n\r\nlabelI = document.getElementById \"text-i\"\r\n\r\nlabelJ = document.getElementById \"text-j\"\r\n\r\n\r\ndo moveClouds = ->\r\n\r\n\t# if i < 900\r\n\r\n\t\t# cloud.style.left = parseInt(getComputedStyle(cloud).left) - 2 + 'px'\r\n\r\n\t\t# cloudBack.style.left = parseInt(getComputedStyle(cloudBack).left) - 1 + 'px'\r\n\r\n\tcloud.style.webkitTransform = \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\r\n\tcloudBack.style.webkitTransform = \"translateX(#{-j}px)\"\r\n\r\n\t# if i > 5400\r\n\r\n\t# \tcloud.style.webkitTransform = \"scaleX(-1) translateX(0)\"\r\n\r\n\t# \ti = 1\r\n\r\n\t# if j > 400\r\n\r\n\t# \tcloudBack.style.webkitTransform = \"translateX(0)\"\r\n\r\n\t# \tj = 1\r\n\r\n\r\n\t\t# cloud.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t# cloudBack.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t# cloud.style.opacity = 0\r\n\r\n\t\t# cloudBack.style.opacity = 0\r\n\r\n\tlabelI.value = i\r\n\r\n\tlabelJ.value = j\r\n\r\n\ti++\r\n\r\n\tj++\r\n\r\n\t# cloud.style.webkitTransition = \"16\"\r\n\r\n\trequestAnimationFrame moveClouds\r\n\r\n\r\n","# code on:\r\n\r\nwindow.requestAnimationFrame = requestAnimationFrame || webkitRequestAnimationFrame || mozRequestAnimationFrame || (cb) ->\r\n\r\n\tsetTimeout cb, 16\r\n\r\nconsole.log setTimeout\r\n\r\nsky = document.querySelector '.sky'\r\n\r\ncloudBack = document.querySelector '.cloud-back'\r\n\r\ncloud = document.querySelector '.cloud'\r\n\r\nlogo = document.querySelector '.logo'\r\n\r\nlogo.style.opacity = 0\r\n\r\nlogo.style.webkitTransform = \"translateY(200px) rotateX(-80deg)\"\r\n\r\ni = 1\r\n\r\nj = 1\r\n\r\n# setTimeout =>\r\n\r\n# \tlogo.style.webkitTransition = \"all 4s\"\r\n\r\n# \tlogo.style.webkitTransform = \"translateY(1px) rotateX(1deg)\"\r\n\r\n# \tlogo.style.opacity = 1\r\n\r\n# , 5000\r\n\r\nlabelI = document.getElementById \"text-i\"\r\n\r\nlabelJ = document.getElementById \"text-j\"\r\n\r\n\r\ndo moveClouds = ->\r\n\r\n\t# if i < 900\r\n\r\n\t\t# cloud.style.left = parseInt(getComputedStyle(cloud).left) - 2 + 'px'\r\n\r\n\t\t# cloudBack.style.left = parseInt(getComputedStyle(cloudBack).left) - 1 + 'px'\r\n\r\n\tcloud.style.webkitTransform = \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\r\n\tcloudBack.style.webkitTransform = \"translateX(#{-j}px)\"\r\n\r\n\t# if i > 5400\r\n\r\n\t# \tcloud.style.webkitTransform = \"scaleX(-1) translateX(0)\"\r\n\r\n\t# \ti = 1\r\n\r\n\t# if j > 400\r\n\r\n\t# \tcloudBack.style.webkitTransform = \"translateX(0)\"\r\n\r\n\t# \tj = 1\r\n\r\n\r\n\t\t# cloud.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t# cloudBack.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t# cloud.style.opacity = 0\r\n\r\n\t\t# cloudBack.style.opacity = 0\r\n\r\n\tlabelI.value = i\r\n\r\n\tlabelJ.value = j\r\n\r\n\ti++\r\n\r\n\tj++\r\n\r\n\t# cloud.style.webkitTransition = \"16\"\r\n\r\n\trequestAnimationFrame moveClouds\r\n\r\n\r\n","# code on:\r\n\r\nwindow.requestAnimationFrame = do ->\r\n\r\n\tif typeof window.requestAnimationFrame isnt 'undefined' then return requestAnimationFrame\r\n\r\n\tif typeof window.webkitRequestAnimationFrame isnt 'undefined' then return webkitRequestAnimationFrame\r\n\r\n\tif typeof window.mozRequestAnimationFrame isnt 'undefined' then return mozRequestAnimationFrame\r\n\r\n\t(cb) -> setTimeout cb, 16.66\r\n\r\n# window.requestAnimationFrame = requestAnimationFrame || webkitRequestAnimationFrame || mozRequestAnimationFrame || (cb) ->\r\n\r\n# \tsetTimeout cb, 16\r\n\r\n# console.log setTimeout\r\n\r\nsky = document.querySelector '.sky'\r\n\r\ncloudBack = document.querySelector '.cloud-back'\r\n\r\ncloud = document.querySelector '.cloud'\r\n\r\nlogo = document.querySelector '.logo'\r\n\r\nlogo.style.opacity = 0\r\n\r\nlogo.style.webkitTransform = \"translateY(200px) rotateX(-80deg)\"\r\n\r\ni = 1\r\n\r\nj = 1\r\n\r\n# setTimeout =>\r\n\r\n# \tlogo.style.webkitTransition = \"all 4s\"\r\n\r\n# \tlogo.style.webkitTransform = \"translateY(1px) rotateX(1deg)\"\r\n\r\n# \tlogo.style.opacity = 1\r\n\r\n# , 5000\r\n\r\nlabelI = document.getElementById \"text-i\"\r\n\r\nlabelJ = document.getElementById \"text-j\"\r\n\r\n\r\ndo moveClouds = ->\r\n\r\n\t# if i < 900\r\n\r\n\t\t# cloud.style.left = parseInt(getComputedStyle(cloud).left) - 2 + 'px'\r\n\r\n\t\t# cloudBack.style.left = parseInt(getComputedStyle(cloudBack).left) - 1 + 'px'\r\n\r\n\tcloud.style.webkitTransform = \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\r\n\tcloudBack.style.webkitTransform = \"translateX(#{-j}px)\"\r\n\r\n\t# if i > 5400\r\n\r\n\t# \tcloud.style.webkitTransform = \"scaleX(-1) translateX(0)\"\r\n\r\n\t# \ti = 1\r\n\r\n\t# if j > 400\r\n\r\n\t# \tcloudBack.style.webkitTransform = \"translateX(0)\"\r\n\r\n\t# \tj = 1\r\n\r\n\r\n\t\t# cloud.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t# cloudBack.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t# cloud.style.opacity = 0\r\n\r\n\t\t# cloudBack.style.opacity = 0\r\n\r\n\tlabelI.value = i\r\n\r\n\tlabelJ.value = j\r\n\r\n\ti++\r\n\r\n\tj++\r\n\r\n\t# cloud.style.webkitTransition = \"16\"\r\n\r\n\trequestAnimationFrame moveClouds\r\n\r\n\r\n","","getCSSProp = do ->\r\n\r\n\tp = null\r\n\r\n\tel = document.createElement 'div'\r\n\r\n\t(possibleProps) ->\r\n\r\n\t\tfor prop in possibleProps\r\n\r\n\t\t\treturn prop if el.style[prop] isnt undefined\r\n\r\n\t\tfalse\r\n\r\ncssPropertySetter = (prop) ->\r\n\r\n\tactualProp = getCSSProp getPossiblePropsFor prop\r\n\r\n\treturn (->) unless actualProp\r\n\r\n\t(el, v) -> el.style[actualProp] = v\r\n\r\ngetPossiblePropsFor = (prop) ->\r\n\r\n\t[\r\n\t\t'webkit' + prop[0].toUpperCase() + prop.substr(1, prop.length),\r\n\r\n\t\t'moz' + prop[0].toUpperCase() + prop.substr(1, prop.length),\r\n\r\n\t\t'ms' + prop[0].toUpperCase() + prop.substr(1, prop.length),\r\n\r\n\t\tprop\r\n\t]\r\n\r\nmodule.exports = css =\r\n\r\n\tsetTransform: cssPropertySetter 'transform'\r\n\r\n\tsetTransformStyle: cssPropertySetter 'transformStyle'\r\n\r\n\tsetTransformOrigin: cssPropertySetter 'transformOrigin'\r\n\r\n\tsetCssFilter: cssPropertySetter 'filter'\r\n\r\n\tsetTransitionDuration: cssPropertySetter 'transitionDuration'\r\n\r\n\tsetTransitionTimingFunction: cssPropertySetter 'transitionTimingFunction'\r\n\r\n\t# Turns numbers to css rgb representation\r\n\trgb: (r, g, b) ->\r\n\r\n\t\t'rgb(' + r + ', ' + g + ', ' + b + ')'","# code on:\r\ncss = require '../lib/css'\r\n\r\nwindow.requestAnimationFrame = do ->\r\n\r\n\tif typeof window.requestAnimationFrame isnt 'undefined' then return requestAnimationFrame\r\n\r\n\tif typeof window.webkitRequestAnimationFrame isnt 'undefined' then return webkitRequestAnimationFrame\r\n\r\n\tif typeof window.mozRequestAnimationFrame isnt 'undefined' then return mozRequestAnimationFrame\r\n\r\n\t(cb) -> setTimeout cb, 16.66\r\n\r\n# window.requestAnimationFrame = requestAnimationFrame || webkitRequestAnimationFrame || mozRequestAnimationFrame || (cb) ->\r\n\r\n# \tsetTimeout cb, 16\r\n\r\n# console.log setTimeout\r\n\r\nsky = document.querySelector '.sky'\r\n\r\ncloudBack = document.querySelector '.cloud-back'\r\n\r\ncloud = document.querySelector '.cloud'\r\n\r\nlogo = document.querySelector '.logo'\r\n\r\nlogo.style.opacity = 0\r\n\r\nlogo.style.webkitTransform = \"translateY(200px) rotateX(-80deg)\"\r\n\r\ni = 1\r\n\r\nj = 1\r\n\r\n# setTimeout =>\r\n\r\n# \tlogo.style.webkitTransition = \"all 4s\"\r\n\r\n# \tlogo.style.webkitTransform = \"translateY(1px) rotateX(1deg)\"\r\n\r\n# \tlogo.style.opacity = 1\r\n\r\n# , 5000\r\n\r\nlabelI = document.getElementById \"text-i\"\r\n\r\nlabelJ = document.getElementById \"text-j\"\r\n\r\n\r\ndo moveClouds = ->\r\n\r\n\t# if i < 900\r\n\r\n\t\t# cloud.style.left = parseInt(getComputedStyle(cloud).left) - 2 + 'px'\r\n\r\n\t\t# cloudBack.style.left = parseInt(getComputedStyle(cloudBack).left) - 1 + 'px'\r\n\r\n\r\n\tcloud.style.webkitTransform = \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\r\n\tcloudBack.style.webkitTransform = \"translateX(#{-j}px)\"\r\n\r\n\t# if i > 5400\r\n\r\n\t# \tcloud.style.webkitTransform = \"scaleX(-1) translateX(0)\"\r\n\r\n\t# \ti = 1\r\n\r\n\t# if j > 400\r\n\r\n\t# \tcloudBack.style.webkitTransform = \"translateX(0)\"\r\n\r\n\t# \tj = 1\r\n\r\n\r\n\t\t# cloud.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t# cloudBack.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t# cloud.style.opacity = 0\r\n\r\n\t\t# cloudBack.style.opacity = 0\r\n\r\n\tlabelI.value = i\r\n\r\n\tlabelJ.value = j\r\n\r\n\ti++\r\n\r\n\tj++\r\n\r\n\t# cloud.style.webkitTransition = \"16\"\r\n\r\n\trequestAnimationFrame moveClouds\r\n\r\n\r\n","# code on:\r\ncss = require '../lib/css'\r\n\r\nwindow.requestAnimationFrame = do ->\r\n\r\n\tif typeof window.requestAnimationFrame isnt 'undefined' then return requestAnimationFrame\r\n\r\n\tif typeof window.webkitRequestAnimationFrame isnt 'undefined' then return webkitRequestAnimationFrame\r\n\r\n\tif typeof window.mozRequestAnimationFrame isnt 'undefined' then return mozRequestAnimationFrame\r\n\r\n\t(cb) -> setTimeout cb, 16.66\r\n\r\n# window.requestAnimationFrame = requestAnimationFrame || webkitRequestAnimationFrame || mozRequestAnimationFrame || (cb) ->\r\n\r\n# \tsetTimeout cb, 16\r\n\r\n# console.log setTimeout\r\n\r\nsky = document.querySelector '.sky'\r\n\r\ncloudBack = document.querySelector '.cloud-back'\r\n\r\ncloud = document.querySelector '.cloud'\r\n\r\nlogo = document.querySelector '.logo'\r\n\r\nlogo.style.opacity = 0\r\n\r\nlogo.style.webkitTransform = \"translateY(200px) rotateX(-80deg)\"\r\n\r\ni = 1\r\n\r\nj = 1\r\n\r\n# setTimeout =>\r\n\r\n# \tlogo.style.webkitTransition = \"all 4s\"\r\n\r\n# \tlogo.style.webkitTransform = \"translateY(1px) rotateX(1deg)\"\r\n\r\n# \tlogo.style.opacity = 1\r\n\r\n# , 5000\r\n\r\nlabelI = document.getElementById \"text-i\"\r\n\r\nlabelJ = document.getElementById \"text-j\"\r\n\r\n\r\ndo moveClouds = ->\r\n\r\n\t# if i < 900\r\n\r\n\t\t# cloud.style.left = parseInt(getComputedStyle(cloud).left) - 2 + 'px'\r\n\r\n\t\t# cloudBack.style.left = parseInt(getComputedStyle(cloudBack).left) - 1 + 'px'\r\n\r\n\tcss.setTransform cloud, \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\t# cloud.style.webkitTransform = \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\r\n\t# css.setTransform cloudBack, \"translateX(#{-j}px)\"\r\n\r\n\t# cloudBack.style.webkitTransform = \"translateX(#{-j}px)\"\r\n\r\n\t# if i > 5400\r\n\r\n\t# \tcloud.style.webkitTransform = \"scaleX(-1) translateX(0)\"\r\n\r\n\t# \ti = 1\r\n\r\n\t# if j > 400\r\n\r\n\t# \tcloudBack.style.webkitTransform = \"translateX(0)\"\r\n\r\n\t# \tj = 1\r\n\r\n\r\n\t\t# cloud.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t# cloudBack.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t# cloud.style.opacity = 0\r\n\r\n\t\t# cloudBack.style.opacity = 0\r\n\r\n\tlabelI.value = i\r\n\r\n\tlabelJ.value = j\r\n\r\n\ti++\r\n\r\n\tj++\r\n\r\n\t# cloud.style.webkitTransition = \"16\"\r\n\r\n\trequestAnimationFrame moveClouds\r\n\r\n\r\n","define ['../lib/css'], (css) ->\r\n\r\n\twindow.requestAnimationFrame = do ->\r\n\r\n\t\tif typeof window.requestAnimationFrame isnt 'undefined' then return requestAnimationFrame\r\n\r\n\t\tif typeof window.webkitRequestAnimationFrame isnt 'undefined' then return webkitRequestAnimationFrame\r\n\r\n\t\tif typeof window.mozRequestAnimationFrame isnt 'undefined' then return mozRequestAnimationFrame\r\n\r\n\t\t(cb) -> setTimeout cb, 16.66\r\n\r\n\t# window.requestAnimationFrame = requestAnimationFrame || webkitRequestAnimationFrame || mozRequestAnimationFrame || (cb) ->\r\n\r\n\t# \tsetTimeout cb, 16\r\n\r\n\t# console.log setTimeout\r\n\r\n\tsky = document.querySelector '.sky'\r\n\r\n\tcloudBack = document.querySelector '.cloud-back'\r\n\r\n\tcloud = document.querySelector '.cloud'\r\n\r\n\tlogo = document.querySelector '.logo'\r\n\r\n\tlogo.style.opacity = 0\r\n\r\n\tlogo.style.webkitTransform = \"translateY(200px) rotateX(-80deg)\"\r\n\r\n\ti = 1\r\n\r\n\tj = 1\r\n\r\n\t# setTimeout =>\r\n\r\n\t# \tlogo.style.webkitTransition = \"all 4s\"\r\n\r\n\t# \tlogo.style.webkitTransform = \"translateY(1px) rotateX(1deg)\"\r\n\r\n\t# \tlogo.style.opacity = 1\r\n\r\n\t# , 5000\r\n\r\n\tlabelI = document.getElementById \"text-i\"\r\n\r\n\tlabelJ = document.getElementById \"text-j\"\r\n\r\n\r\n\tdo moveClouds = ->\r\n\r\n\t\t# if i < 900\r\n\r\n\t\t\t# cloud.style.left = parseInt(getComputedStyle(cloud).left) - 2 + 'px'\r\n\r\n\t\t\t# cloudBack.style.left = parseInt(getComputedStyle(cloudBack).left) - 1 + 'px'\r\n\r\n\t\tcss.setTransform cloud, \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\t\t# cloud.style.webkitTransform = \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\r\n\t\t# css.setTransform cloudBack, \"translateX(#{-j}px)\"\r\n\r\n\t\t# cloudBack.style.webkitTransform = \"translateX(#{-j}px)\"\r\n\r\n\t\t# if i > 5400\r\n\r\n\t\t# \tcloud.style.webkitTransform = \"scaleX(-1) translateX(0)\"\r\n\r\n\t\t# \ti = 1\r\n\r\n\t\t# if j > 400\r\n\r\n\t\t# \tcloudBack.style.webkitTransform = \"translateX(0)\"\r\n\r\n\t\t# \tj = 1\r\n\r\n\r\n\t\t\t# cloud.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloudBack.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloud.style.opacity = 0\r\n\r\n\t\t\t# cloudBack.style.opacity = 0\r\n\r\n\t\tlabelI.value = i\r\n\r\n\t\tlabelJ.value = j\r\n\r\n\t\ti++\r\n\r\n\t\tj++\r\n\r\n\t\t# cloud.style.webkitTransition = \"16\"\r\n\r\n\t\trequestAnimationFrame moveClouds\r\n\r\n\r\n","do ->\r\n\r\n\tgetCSSProp = do ->\r\n\r\n\t\tp = null\r\n\r\n\t\tel = document.createElement 'div'\r\n\r\n\t\t(possibleProps) ->\r\n\r\n\t\t\tfor prop in possibleProps\r\n\r\n\t\t\t\treturn prop if el.style[prop] isnt undefined\r\n\r\n\t\t\tfalse\r\n\r\n\tcssPropertySetter = (prop) ->\r\n\r\n\t\tactualProp = getCSSProp getPossiblePropsFor prop\r\n\r\n\t\treturn (->) unless actualProp\r\n\r\n\t\t(el, v) -> el.style[actualProp] = v\r\n\r\n\tgetPossiblePropsFor = (prop) ->\r\n\r\n\t\t[\r\n\t\t\t'webkit' + prop[0].toUpperCase() + prop.substr(1, prop.length),\r\n\r\n\t\t\t'moz' + prop[0].toUpperCase() + prop.substr(1, prop.length),\r\n\r\n\t\t\t'ms' + prop[0].toUpperCase() + prop.substr(1, prop.length),\r\n\r\n\t\t\tprop\r\n\t\t]\r\n\r\n\tcss =\r\n\r\n\t\tsetTransform: cssPropertySetter 'transform'\r\n\r\n\t\tsetTransformStyle: cssPropertySetter 'transformStyle'\r\n\r\n\t\tsetTransformOrigin: cssPropertySetter 'transformOrigin'\r\n\r\n\t\tsetCssFilter: cssPropertySetter 'filter'\r\n\r\n\t\tsetTransitionDuration: cssPropertySetter 'transitionDuration'\r\n\r\n\t\tsetTransitionTimingFunction: cssPropertySetter 'transitionTimingFunction'\r\n\r\n\t\t# Turns numbers to css rgb representation\r\n\t\trgb: (r, g, b) ->\r\n\r\n\t\t\t'rgb(' + r + ', ' + g + ', ' + b + ')'","define ->\r\n\r\n\tgetCSSProp = do ->\r\n\r\n\t\tp = null\r\n\r\n\t\tel = document.createElement 'div'\r\n\r\n\t\t(possibleProps) ->\r\n\r\n\t\t\tfor prop in possibleProps\r\n\r\n\t\t\t\treturn prop if el.style[prop] isnt undefined\r\n\r\n\t\t\tfalse\r\n\r\n\tcssPropertySetter = (prop) ->\r\n\r\n\t\tactualProp = getCSSProp getPossiblePropsFor prop\r\n\r\n\t\treturn (->) unless actualProp\r\n\r\n\t\t(el, v) -> el.style[actualProp] = v\r\n\r\n\tgetPossiblePropsFor = (prop) ->\r\n\r\n\t\t[\r\n\t\t\t'webkit' + prop[0].toUpperCase() + prop.substr(1, prop.length),\r\n\r\n\t\t\t'moz' + prop[0].toUpperCase() + prop.substr(1, prop.length),\r\n\r\n\t\t\t'ms' + prop[0].toUpperCase() + prop.substr(1, prop.length),\r\n\r\n\t\t\tprop\r\n\t\t]\r\n\r\n\tcss =\r\n\r\n\t\tsetTransform: cssPropertySetter 'transform'\r\n\r\n\t\tsetTransformStyle: cssPropertySetter 'transformStyle'\r\n\r\n\t\tsetTransformOrigin: cssPropertySetter 'transformOrigin'\r\n\r\n\t\tsetCssFilter: cssPropertySetter 'filter'\r\n\r\n\t\tsetTransitionDuration: cssPropertySetter 'transitionDuration'\r\n\r\n\t\tsetTransitionTimingFunction: cssPropertySetter 'transitionTimingFunction'\r\n\r\n\t\t# Turns numbers to css rgb representation\r\n\t\trgb: (r, g, b) ->\r\n\r\n\t\t\t'rgb(' + r + ', ' + g + ', ' + b + ')'","define ['css'], (css) ->\r\n\r\n\twindow.requestAnimationFrame = do ->\r\n\r\n\t\tif typeof window.requestAnimationFrame isnt 'undefined' then return requestAnimationFrame\r\n\r\n\t\tif typeof window.webkitRequestAnimationFrame isnt 'undefined' then return webkitRequestAnimationFrame\r\n\r\n\t\tif typeof window.mozRequestAnimationFrame isnt 'undefined' then return mozRequestAnimationFrame\r\n\r\n\t\t(cb) -> setTimeout cb, 16.66\r\n\r\n\t# window.requestAnimationFrame = requestAnimationFrame || webkitRequestAnimationFrame || mozRequestAnimationFrame || (cb) ->\r\n\r\n\t# \tsetTimeout cb, 16\r\n\r\n\t# console.log setTimeout\r\n\r\n\tsky = document.querySelector '.sky'\r\n\r\n\tcloudBack = document.querySelector '.cloud-back'\r\n\r\n\tcloud = document.querySelector '.cloud'\r\n\r\n\tlogo = document.querySelector '.logo'\r\n\r\n\tlogo.style.opacity = 0\r\n\r\n\tlogo.style.webkitTransform = \"translateY(200px) rotateX(-80deg)\"\r\n\r\n\ti = 1\r\n\r\n\tj = 1\r\n\r\n\t# setTimeout =>\r\n\r\n\t# \tlogo.style.webkitTransition = \"all 4s\"\r\n\r\n\t# \tlogo.style.webkitTransform = \"translateY(1px) rotateX(1deg)\"\r\n\r\n\t# \tlogo.style.opacity = 1\r\n\r\n\t# , 5000\r\n\r\n\tlabelI = document.getElementById \"text-i\"\r\n\r\n\tlabelJ = document.getElementById \"text-j\"\r\n\r\n\r\n\tdo moveClouds = ->\r\n\r\n\t\t# if i < 900\r\n\r\n\t\t\t# cloud.style.left = parseInt(getComputedStyle(cloud).left) - 2 + 'px'\r\n\r\n\t\t\t# cloudBack.style.left = parseInt(getComputedStyle(cloudBack).left) - 1 + 'px'\r\n\r\n\t\tcss.setTransform cloud, \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\t\t# cloud.style.webkitTransform = \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\r\n\t\t# css.setTransform cloudBack, \"translateX(#{-j}px)\"\r\n\r\n\t\t# cloudBack.style.webkitTransform = \"translateX(#{-j}px)\"\r\n\r\n\t\t# if i > 5400\r\n\r\n\t\t# \tcloud.style.webkitTransform = \"scaleX(-1) translateX(0)\"\r\n\r\n\t\t# \ti = 1\r\n\r\n\t\t# if j > 400\r\n\r\n\t\t# \tcloudBack.style.webkitTransform = \"translateX(0)\"\r\n\r\n\t\t# \tj = 1\r\n\r\n\r\n\t\t\t# cloud.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloudBack.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloud.style.opacity = 0\r\n\r\n\t\t\t# cloudBack.style.opacity = 0\r\n\r\n\t\tlabelI.value = i\r\n\r\n\t\tlabelJ.value = j\r\n\r\n\t\ti++\r\n\r\n\t\tj++\r\n\r\n\t\t# cloud.style.webkitTransition = \"16\"\r\n\r\n\t\trequestAnimationFrame moveClouds\r\n\r\n\r\n","define ['css'], (css) ->\r\n\r\n\twindow.requestAnimationFrame = do ->\r\n\r\n\t\tif typeof window.requestAnimationFrame isnt 'undefined' then return requestAnimationFrame\r\n\r\n\t\tif typeof window.webkitRequestAnimationFrame isnt 'undefined' then return webkitRequestAnimationFrame\r\n\r\n\t\tif typeof window.mozRequestAnimationFrame isnt 'undefined' then return mozRequestAnimationFrame\r\n\r\n\t\t(cb) -> setTimeout cb, 16.66\r\n\r\n\t# window.requestAnimationFrame = requestAnimationFrame || webkitRequestAnimationFrame || mozRequestAnimationFrame || (cb) ->\r\n\r\n\t# \tsetTimeout cb, 16\r\n\r\n\t# console.log setTimeout\r\n\r\n\tsky = document.querySelector '.sky'\r\n\r\n\tcloudBack = document.querySelector '.cloud-back'\r\n\r\n\tcloud = document.querySelector '.cloud'\r\n\r\n\tlogo = document.querySelector '.logo'\r\n\r\n\tlogo.style.opacity = 0\r\n\r\n\tlogo.style.webkitTransform = \"translateY(200px) rotateX(-80deg)\"\r\n\r\n\ti = 1\r\n\r\n\tj = 1\r\n\r\n\t# setTimeout =>\r\n\r\n\t# \tlogo.style.webkitTransition = \"all 4s\"\r\n\r\n\t# \tlogo.style.webkitTransform = \"translateY(1px) rotateX(1deg)\"\r\n\r\n\t# \tlogo.style.opacity = 1\r\n\r\n\t# , 5000\r\n\r\n\tlabelI = document.getElementById \"text-i\"\r\n\r\n\tlabelJ = document.getElementById \"text-j\"\r\n\r\n\r\n\tdo moveClouds = ->\r\n\r\n\t\t# if i < 900\r\n\r\n\t\t\t# cloud.style.left = parseInt(getComputedStyle(cloud).left) - 2 + 'px'\r\n\r\n\t\t\t# cloudBack.style.left = parseInt(getComputedStyle(cloudBack).left) - 1 + 'px'\r\n\r\n\t\tcss.setTransform cloud, \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\t\t# cloud.style.webkitTransform = \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\r\n\t\tcss.setTransform cloudBack, \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\t\t# css.setTransform cloudBack, \"translateX(#{-j}px)\"\r\n\r\n\t\t# cloudBack.style.webkitTransform = \"translateX(#{-j}px)\"\r\n\r\n\t\t# if i > 5400\r\n\r\n\t\t# \tcloud.style.webkitTransform = \"scaleX(-1) translateX(0)\"\r\n\r\n\t\t# \ti = 1\r\n\r\n\t\t# if j > 400\r\n\r\n\t\t# \tcloudBack.style.webkitTransform = \"translateX(0)\"\r\n\r\n\t\t# \tj = 1\r\n\r\n\r\n\t\t\t# cloud.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloudBack.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloud.style.opacity = 0\r\n\r\n\t\t\t# cloudBack.style.opacity = 0\r\n\r\n\t\tlabelI.value = i\r\n\r\n\t\tlabelJ.value = j\r\n\r\n\t\ti++\r\n\r\n\t\tj++\r\n\r\n\t\t# cloud.style.webkitTransition = \"16\"\r\n\r\n\t\trequestAnimationFrame moveClouds\r\n\r\n\r\n","define ['css'], (css) ->\r\n\r\n\twindow.requestAnimationFrame = do ->\r\n\r\n\t\tif typeof window.requestAnimationFrame isnt 'undefined' then return requestAnimationFrame\r\n\r\n\t\tif typeof window.webkitRequestAnimationFrame isnt 'undefined' then return webkitRequestAnimationFrame\r\n\r\n\t\tif typeof window.mozRequestAnimationFrame isnt 'undefined' then return mozRequestAnimationFrame\r\n\r\n\t\t(cb) -> setTimeout cb, 16.66\r\n\r\n\t# window.requestAnimationFrame = requestAnimationFrame || webkitRequestAnimationFrame || mozRequestAnimationFrame || (cb) ->\r\n\r\n\t# \tsetTimeout cb, 16\r\n\r\n\t# console.log setTimeout\r\n\r\n\tsky = document.querySelector '.sky'\r\n\r\n\tcloudBack = document.querySelector '.cloud-back'\r\n\r\n\tcloud = document.querySelector '.cloud'\r\n\r\n\tlogo = document.querySelector '.logo'\r\n\r\n\tlogo.style.opacity = 0\r\n\r\n\tlogo.style.webkitTransform = \"translateY(200px) rotateX(-80deg)\"\r\n\r\n\ti = 1\r\n\r\n\tj = 1\r\n\r\n\t# setTimeout =>\r\n\r\n\t# \tlogo.style.webkitTransition = \"all 4s\"\r\n\r\n\t# \tlogo.style.webkitTransform = \"translateY(1px) rotateX(1deg)\"\r\n\r\n\t# \tlogo.style.opacity = 1\r\n\r\n\t# , 5000\r\n\r\n\tlabelI = document.getElementById \"text-i\"\r\n\r\n\tlabelJ = document.getElementById \"text-j\"\r\n\r\n\r\n\tdo moveClouds = ->\r\n\r\n\t\t# if i < 900\r\n\r\n\t\t\t# cloud.style.left = parseInt(getComputedStyle(cloud).left) - 2 + 'px'\r\n\r\n\t\t\t# cloudBack.style.left = parseInt(getComputedStyle(cloudBack).left) - 1 + 'px'\r\n\r\n\t\tcss.setTransform cloud, \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\t\t# cloud.style.webkitTransform = \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\r\n\t\tcss.setTransform cloudBack, \"scaleX(-1) translateX(#{-j}px)\"\r\n\t\t# css.setTransform cloudBack, \"translateX(#{-j}px)\"\r\n\r\n\t\t# cloudBack.style.webkitTransform = \"translateX(#{-j}px)\"\r\n\r\n\t\t# if i > 5400\r\n\r\n\t\t# \tcloud.style.webkitTransform = \"scaleX(-1) translateX(0)\"\r\n\r\n\t\t# \ti = 1\r\n\r\n\t\t# if j > 400\r\n\r\n\t\t# \tcloudBack.style.webkitTransform = \"translateX(0)\"\r\n\r\n\t\t# \tj = 1\r\n\r\n\r\n\t\t\t# cloud.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloudBack.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloud.style.opacity = 0\r\n\r\n\t\t\t# cloudBack.style.opacity = 0\r\n\r\n\t\tlabelI.value = i\r\n\r\n\t\tlabelJ.value = j\r\n\r\n\t\ti++\r\n\r\n\t\tj++\r\n\r\n\t\t# cloud.style.webkitTransition = \"16\"\r\n\r\n\t\trequestAnimationFrame moveClouds\r\n\r\n\r\n","define ['css'], (css) ->\r\n\r\n\twindow.requestAnimationFrame = do ->\r\n\r\n\t\tif typeof window.requestAnimationFrame isnt 'undefined' then return requestAnimationFrame\r\n\r\n\t\tif typeof window.webkitRequestAnimationFrame isnt 'undefined' then return webkitRequestAnimationFrame\r\n\r\n\t\tif typeof window.mozRequestAnimationFrame isnt 'undefined' then return mozRequestAnimationFrame\r\n\r\n\t\t(cb) -> setTimeout cb, 16.66\r\n\r\n\t# window.requestAnimationFrame = requestAnimationFrame || webkitRequestAnimationFrame || mozRequestAnimationFrame || (cb) ->\r\n\r\n\t# \tsetTimeout cb, 16\r\n\r\n\t# console.log setTimeout\r\n\r\n\tsky = document.querySelector '.sky'\r\n\r\n\tcloudBack = document.querySelector '.cloud-back'\r\n\r\n\tcloud = document.querySelector '.cloud'\r\n\r\n\tlogo = document.querySelector '.logo'\r\n\r\n\tlogo.style.opacity = 0\r\n\r\n\tlogo.style.webkitTransform = \"translateY(200px) rotateX(-80deg)\"\r\n\r\n\ti = 1\r\n\r\n\tj = 1\r\n\r\n\t# setTimeout =>\r\n\r\n\t# \tlogo.style.webkitTransition = \"all 4s\"\r\n\r\n\t# \tlogo.style.webkitTransform = \"translateY(1px) rotateX(1deg)\"\r\n\r\n\t# \tlogo.style.opacity = 1\r\n\r\n\t# , 5000\r\n\r\n\tlabelI = document.getElementById \"text-i\"\r\n\r\n\tlabelJ = document.getElementById \"text-j\"\r\n\r\n\r\n\tdo moveClouds = ->\r\n\r\n\t\t# if i < 900\r\n\r\n\t\t\t# cloud.style.left = parseInt(getComputedStyle(cloud).left) - 2 + 'px'\r\n\r\n\t\t\t# cloudBack.style.left = parseInt(getComputedStyle(cloudBack).left) - 1 + 'px'\r\n\r\n\t\tcss.setTransform cloud, \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\t\t# cloud.style.webkitTransform = \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\r\n\t\tcss.setTransform cloudBack, \"translateX(#{-j}px)\"\r\n\t\t# css.setTransform cloudBack, \"translateX(#{-j}px)\"\r\n\r\n\t\t# cloudBack.style.webkitTransform = \"translateX(#{-j}px)\"\r\n\r\n\t\t# if i > 5400\r\n\r\n\t\t# \tcloud.style.webkitTransform = \"scaleX(-1) translateX(0)\"\r\n\r\n\t\t# \ti = 1\r\n\r\n\t\t# if j > 400\r\n\r\n\t\t# \tcloudBack.style.webkitTransform = \"translateX(0)\"\r\n\r\n\t\t# \tj = 1\r\n\r\n\r\n\t\t\t# cloud.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloudBack.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloud.style.opacity = 0\r\n\r\n\t\t\t# cloudBack.style.opacity = 0\r\n\r\n\t\tlabelI.value = i\r\n\r\n\t\tlabelJ.value = j\r\n\r\n\t\ti++\r\n\r\n\t\tj++\r\n\r\n\t\t# cloud.style.webkitTransition = \"16\"\r\n\r\n\t\trequestAnimationFrame moveClouds\r\n\r\n\r\n","define ['css'], (css) ->\r\n\r\n\twindow.requestAnimationFrame = do ->\r\n\r\n\t\tif typeof window.requestAnimationFrame isnt 'undefined' then return requestAnimationFrame\r\n\r\n\t\tif typeof window.webkitRequestAnimationFrame isnt 'undefined' then return webkitRequestAnimationFrame\r\n\r\n\t\tif typeof window.mozRequestAnimationFrame isnt 'undefined' then return mozRequestAnimationFrame\r\n\r\n\t\t(cb) -> setTimeout cb, 16.66\r\n\r\n\t# window.requestAnimationFrame = requestAnimationFrame || webkitRequestAnimationFrame || mozRequestAnimationFrame || (cb) ->\r\n\r\n\t# \tsetTimeout cb, 16\r\n\r\n\t# console.log setTimeout\r\n\r\n\tsky = document.querySelector '.sky'\r\n\r\n\tcloudBack = document.querySelector '.cloud-back'\r\n\r\n\tcloud = document.querySelector '.cloud'\r\n\r\n\tlogo = document.querySelector '.logo'\r\n\r\n\tlogo.style.opacity = 0\r\n\r\n\tlogo.style.webkitTransform = \"translateY(200px) rotateX(-80deg)\"\r\n\r\n\ti = 1\r\n\r\n\tj = 1\r\n\r\n\t# setTimeout =>\r\n\r\n\t# \tlogo.style.webkitTransition = \"all 4s\"\r\n\r\n\t# \tlogo.style.webkitTransform = \"translateY(1px) rotateX(1deg)\"\r\n\r\n\t# \tlogo.style.opacity = 1\r\n\r\n\t# , 5000\r\n\r\n\tlabelI = document.getElementById \"text-i\"\r\n\r\n\tlabelJ = document.getElementById \"text-j\"\r\n\r\n\r\n\tdo moveClouds = ->\r\n\r\n\t\t# if i < 900\r\n\r\n\t\t\t# cloud.style.left = parseInt(getComputedStyle(cloud).left) - 2 + 'px'\r\n\r\n\t\t\t# cloudBack.style.left = parseInt(getComputedStyle(cloudBack).left) - 1 + 'px'\r\n\r\n\t\tcss.setTransform cloud, \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\t\t# cloud.style.webkitTransform = \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\r\n\t\tcss.setTransform cloudBack, \"translateX(#{-j}px)\"\r\n\t\t# css.setTransform cloudBack, \"translateX(#{-j}px)\"\r\n\r\n\t\t# cloudBack.style.webkitTransform = \"translateX(#{-j}px)\"\r\n\r\n\t\tif i > 2800\r\n\r\n\t\t\tcloud.style.webkitTransform = \"scaleX(-1) translateX(0)\"\r\n\r\n\t\t\ti = 1\r\n\r\n\t\tif j > 4950\r\n\r\n\t\t\tcloudBack.style.webkitTransform = \"translateX(0)\"\r\n\r\n\t\t\tj = 1\r\n\r\n\r\n\t\t\t# cloud.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloudBack.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloud.style.opacity = 0\r\n\r\n\t\t\t# cloudBack.style.opacity = 0\r\n\r\n\t\tlabelI.value = i\r\n\r\n\t\tlabelJ.value = j\r\n\r\n\t\ti++\r\n\r\n\t\tj++\r\n\r\n\t\t# cloud.style.webkitTransition = \"16\"\r\n\r\n\t\trequestAnimationFrame moveClouds\r\n\r\n\r\n","define ['css'], (css) ->\r\n\r\n\twindow.requestAnimationFrame = do ->\r\n\r\n\t\tif typeof window.requestAnimationFrame isnt 'undefined' then return requestAnimationFrame\r\n\r\n\t\tif typeof window.webkitRequestAnimationFrame isnt 'undefined' then return webkitRequestAnimationFrame\r\n\r\n\t\tif typeof window.mozRequestAnimationFrame isnt 'undefined' then return mozRequestAnimationFrame\r\n\r\n\t\t(cb) -> setTimeout cb, 16.66\r\n\r\n\t# window.requestAnimationFrame = requestAnimationFrame || webkitRequestAnimationFrame || mozRequestAnimationFrame || (cb) ->\r\n\r\n\t# \tsetTimeout cb, 16\r\n\r\n\t# console.log setTimeout\r\n\r\n\tsky = document.querySelector '.sky'\r\n\r\n\tcloudBack = document.querySelector '.cloud-back'\r\n\r\n\tcloud = document.querySelector '.cloud'\r\n\r\n\tlogo = document.querySelector '.logo'\r\n\r\n\tlogo.style.opacity = 0\r\n\r\n\tlogo.style.webkitTransform = \"translateY(200px) rotateX(-80deg)\"\r\n\r\n\ti = 1\r\n\r\n\tj = 1\r\n\r\n\t# setTimeout =>\r\n\r\n\t# \tlogo.style.webkitTransition = \"all 4s\"\r\n\r\n\t# \tlogo.style.webkitTransform = \"translateY(1px) rotateX(1deg)\"\r\n\r\n\t# \tlogo.style.opacity = 1\r\n\r\n\t# , 5000\r\n\r\n\tlabelI = document.getElementById \"text-i\"\r\n\r\n\tlabelJ = document.getElementById \"text-j\"\r\n\r\n\r\n\tdo moveClouds = ->\r\n\r\n\t\t# if i < 900\r\n\r\n\t\t\t# cloud.style.left = parseInt(getComputedStyle(cloud).left) - 2 + 'px'\r\n\r\n\t\t\t# cloudBack.style.left = parseInt(getComputedStyle(cloudBack).left) - 1 + 'px'\r\n\r\n\t\tcss.setTransform cloud, \"scaleX(-1) translateX(#{i}px)\"\r\n\t\t# cloud.style.webkitTransform = \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\r\n\t\tcss.setTransform cloudBack, \"translateX(#{-j / 2}px)\"\r\n\t\t# css.setTransform cloudBack, \"translateX(#{-j}px)\"\r\n\r\n\t\t# cloudBack.style.webkitTransform = \"translateX(#{-j}px)\"\r\n\r\n\t\tif i > 2800\r\n\r\n\t\t\tcloud.style.webkitTransform = \"scaleX(-1) translateX(0)\"\r\n\r\n\t\t\ti = 1\r\n\r\n\t\tif j > 4950\r\n\r\n\t\t\tcloudBack.style.webkitTransform = \"translateX(0)\"\r\n\r\n\t\t\tj = 1\r\n\r\n\r\n\t\t\t# cloud.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloudBack.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloud.style.opacity = 0\r\n\r\n\t\t\t# cloudBack.style.opacity = 0\r\n\r\n\t\tlabelI.value = i\r\n\r\n\t\tlabelJ.value = j\r\n\r\n\t\ti++\r\n\r\n\t\tj++\r\n\r\n\t\t# cloud.style.webkitTransition = \"16\"\r\n\r\n\t\trequestAnimationFrame moveClouds\r\n\r\n\r\n","define ['css'], (css) ->\r\n\r\n\twindow.requestAnimationFrame = do ->\r\n\r\n\t\tif typeof window.requestAnimationFrame isnt 'undefined' then return requestAnimationFrame\r\n\r\n\t\tif typeof window.webkitRequestAnimationFrame isnt 'undefined' then return webkitRequestAnimationFrame\r\n\r\n\t\tif typeof window.mozRequestAnimationFrame isnt 'undefined' then return mozRequestAnimationFrame\r\n\r\n\t\t(cb) -> setTimeout cb, 16.66\r\n\r\n\t# window.requestAnimationFrame = requestAnimationFrame || webkitRequestAnimationFrame || mozRequestAnimationFrame || (cb) ->\r\n\r\n\t# \tsetTimeout cb, 16\r\n\r\n\t# console.log setTimeout\r\n\r\n\tsky = document.querySelector '.sky'\r\n\r\n\tcloudBack = document.querySelector '.cloud-back'\r\n\r\n\tcloud = document.querySelector '.cloud'\r\n\r\n\tlogo = document.querySelector '.logo'\r\n\r\n\tlogo.style.opacity = 0\r\n\r\n\tlogo.style.webkitTransform = \"translateY(200px) rotateX(-80deg)\"\r\n\r\n\ti = 1\r\n\r\n\tj = 1\r\n\r\n\tsetTimeout =>\r\n\r\n\t\tlogo.style.webkitTransition = \"all 4s\"\r\n\r\n\t\tlogo.style.webkitTransform = \"translateY(1px) rotateX(1deg)\"\r\n\r\n\t\tlogo.style.opacity = 1\r\n\r\n\t, 6000\r\n\r\n\tlabelI = document.getElementById \"text-i\"\r\n\r\n\tlabelJ = document.getElementById \"text-j\"\r\n\r\n\r\n\tdo moveClouds = ->\r\n\r\n\t\t# if i < 900\r\n\r\n\t\t\t# cloud.style.left = parseInt(getComputedStyle(cloud).left) - 2 + 'px'\r\n\r\n\t\t\t# cloudBack.style.left = parseInt(getComputedStyle(cloudBack).left) - 1 + 'px'\r\n\r\n\t\tcss.setTransform cloud, \"scaleX(-1) translateX(#{i}px)\"\r\n\t\t# cloud.style.webkitTransform = \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\r\n\t\tcss.setTransform cloudBack, \"translateX(#{-j / 2}px)\"\r\n\t\t# css.setTransform cloudBack, \"translateX(#{-j}px)\"\r\n\r\n\t\t# cloudBack.style.webkitTransform = \"translateX(#{-j}px)\"\r\n\r\n\t\tif i > 2800\r\n\r\n\t\t\tcloud.style.webkitTransform = \"scaleX(-1) translateX(0)\"\r\n\r\n\t\t\ti = 1\r\n\r\n\t\tif j > 4950\r\n\r\n\t\t\tcloudBack.style.webkitTransform = \"translateX(0)\"\r\n\r\n\t\t\tj = 1\r\n\r\n\r\n\t\t\t# cloud.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloudBack.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloud.style.opacity = 0\r\n\r\n\t\t\t# cloudBack.style.opacity = 0\r\n\r\n\t\tlabelI.value = i\r\n\r\n\t\tlabelJ.value = j\r\n\r\n\t\ti++\r\n\r\n\t\tj++\r\n\r\n\t\t# cloud.style.webkitTransition = \"16\"\r\n\r\n\t\trequestAnimationFrame moveClouds\r\n\r\n\r\n","define ['css'], (css) ->\r\n\r\n\twindow.requestAnimationFrame = do ->\r\n\r\n\t\tif typeof window.requestAnimationFrame isnt 'undefined' then return requestAnimationFrame\r\n\r\n\t\tif typeof window.webkitRequestAnimationFrame isnt 'undefined' then return webkitRequestAnimationFrame\r\n\r\n\t\tif typeof window.mozRequestAnimationFrame isnt 'undefined' then return mozRequestAnimationFrame\r\n\r\n\t\t(cb) -> setTimeout cb, 16.66\r\n\r\n\t# window.requestAnimationFrame = requestAnimationFrame || webkitRequestAnimationFrame || mozRequestAnimationFrame || (cb) ->\r\n\r\n\t# \tsetTimeout cb, 16\r\n\r\n\t# console.log setTimeout\r\n\r\n\tsky = document.querySelector '.sky'\r\n\r\n\tcloudBack = document.querySelector '.cloud-back'\r\n\r\n\tcloud = document.querySelector '.cloud'\r\n\r\n\tlogo = document.querySelector '.logo'\r\n\r\n\tlogo.style.opacity = 0\r\n\r\n\tlogo.style.webkitTransform = \"translateY(200px) rotateX(-80deg)\"\r\n\r\n\ti = 1\r\n\r\n\tj = 1\r\n\r\n\tsetTimeout =>\r\n\r\n\t\tlogo.style.webkitTransition = \"all 4s\"\r\n\r\n\t\tlogo.style.webkitTransform = \"translateY(1px) rotateX(1deg)\"\r\n\r\n\t\tlogo.style.opacity = 1\r\n\r\n\t, 10000\r\n\r\n\tlabelI = document.getElementById \"text-i\"\r\n\r\n\tlabelJ = document.getElementById \"text-j\"\r\n\r\n\r\n\tdo moveClouds = ->\r\n\r\n\t\t# if i < 900\r\n\r\n\t\t\t# cloud.style.left = parseInt(getComputedStyle(cloud).left) - 2 + 'px'\r\n\r\n\t\t\t# cloudBack.style.left = parseInt(getComputedStyle(cloudBack).left) - 1 + 'px'\r\n\r\n\t\tcss.setTransform cloud, \"scaleX(-1) translateX(#{i}px)\"\r\n\t\t# cloud.style.webkitTransform = \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\r\n\t\tcss.setTransform cloudBack, \"translateX(#{-j / 2}px)\"\r\n\t\t# css.setTransform cloudBack, \"translateX(#{-j}px)\"\r\n\r\n\t\t# cloudBack.style.webkitTransform = \"translateX(#{-j}px)\"\r\n\r\n\t\tif i > 2800\r\n\r\n\t\t\tcloud.style.webkitTransform = \"scaleX(-1) translateX(0)\"\r\n\r\n\t\t\ti = 1\r\n\r\n\t\tif j > 4950\r\n\r\n\t\t\tcloudBack.style.webkitTransform = \"translateX(0)\"\r\n\r\n\t\t\tj = 1\r\n\r\n\r\n\t\t\t# cloud.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloudBack.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloud.style.opacity = 0\r\n\r\n\t\t\t# cloudBack.style.opacity = 0\r\n\r\n\t\tlabelI.value = i\r\n\r\n\t\tlabelJ.value = j\r\n\r\n\t\ti++\r\n\r\n\t\tj++\r\n\r\n\t\t# cloud.style.webkitTransition = \"16\"\r\n\r\n\t\trequestAnimationFrame moveClouds\r\n\r\n\r\n","define ['css'], (css) ->\r\n\r\n\twindow.requestAnimationFrame = do ->\r\n\r\n\t\tif typeof window.requestAnimationFrame isnt 'undefined' then return requestAnimationFrame\r\n\r\n\t\tif typeof window.webkitRequestAnimationFrame isnt 'undefined' then return webkitRequestAnimationFrame\r\n\r\n\t\tif typeof window.mozRequestAnimationFrame isnt 'undefined' then return mozRequestAnimationFrame\r\n\r\n\t\t(cb) -> setTimeout cb, 16.66\r\n\r\n\t# window.requestAnimationFrame = requestAnimationFrame || webkitRequestAnimationFrame || mozRequestAnimationFrame || (cb) ->\r\n\r\n\t# \tsetTimeout cb, 16\r\n\r\n\t# console.log setTimeout\r\n\r\n\tsky = document.querySelector '.sky'\r\n\r\n\tcloudBack = document.querySelector '.cloud-back'\r\n\r\n\tcloud = document.querySelector '.cloud'\r\n\r\n\tlogo = document.querySelector '.logo'\r\n\r\n\tlogo.style.opacity = 0\r\n\r\n\tlogo.style.webkitTransform = \"translateY(200px) rotateX(-80deg)\"\r\n\r\n\ti = 1\r\n\r\n\tj = 1\r\n\r\n\tsetTimeout =>\r\n\r\n\t\tlogo.style.webkitTransition = \"all 4s\"\r\n\r\n\t\tlogo.style.webkitTransform = \"translateY(1px) rotateX(1deg)\"\r\n\r\n\t\tlogo.style.opacity = 1\r\n\r\n\t, 10000\r\n\r\n\tlabelI = document.getElementById \"text-i\"\r\n\r\n\tlabelJ = document.getElementById \"text-j\"\r\n\r\n\r\n\tdo moveClouds = ->\r\n\r\n\t\t# if i < 900\r\n\r\n\t\t\t# cloud.style.left = parseInt(getComputedStyle(cloud).left) - 2 + 'px'\r\n\r\n\t\t\t# cloudBack.style.left = parseInt(getComputedStyle(cloudBack).left) - 1 + 'px'\r\n\r\n\t\tcss.setTransform cloud, \"scaleX(-1) translateX(#{i}px)\"\r\n\t\t# cloud.style.webkitTransform = \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\r\n\t\tcss.setTransform cloudBack, \"translateX(#{-j / 2}px)\"\r\n\t\t# css.setTransform cloudBack, \"translateX(#{-j}px)\"\r\n\r\n\t\t# cloudBack.style.webkitTransform = \"translateX(#{-j}px)\"\r\n\r\n\t\t# if i > 2800\r\n\r\n\t\t# \tcloud.style.webkitTransform = \"scaleX(-1) translateX(0)\"\r\n\r\n\t\t# \ti = 1\r\n\r\n\t\t# if j > 4950\r\n\r\n\t\t# \tcloudBack.style.webkitTransform = \"translateX(0)\"\r\n\r\n\t\t# \tj = 1\r\n\r\n\r\n\t\t\t# cloud.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloudBack.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloud.style.opacity = 0\r\n\r\n\t\t\t# cloudBack.style.opacity = 0\r\n\r\n\t\tlabelI.value = i\r\n\r\n\t\tlabelJ.value = j\r\n\r\n\t\ti++\r\n\r\n\t\tj++\r\n\r\n\t\t# cloud.style.webkitTransition = \"16\"\r\n\r\n\t\trequestAnimationFrame moveClouds\r\n\r\n\r\n","define ['css'], (css) ->\r\n\r\n\twindow.requestAnimationFrame = do ->\r\n\r\n\t\tif typeof window.requestAnimationFrame isnt 'undefined' then return requestAnimationFrame\r\n\r\n\t\tif typeof window.webkitRequestAnimationFrame isnt 'undefined' then return webkitRequestAnimationFrame\r\n\r\n\t\tif typeof window.mozRequestAnimationFrame isnt 'undefined' then return mozRequestAnimationFrame\r\n\r\n\t\t(cb) -> setTimeout cb, 16.66\r\n\r\n\t# window.requestAnimationFrame = requestAnimationFrame || webkitRequestAnimationFrame || mozRequestAnimationFrame || (cb) ->\r\n\r\n\t# \tsetTimeout cb, 16\r\n\r\n\t# console.log setTimeout\r\n\r\n\tsky = document.querySelector '.sky'\r\n\r\n\tcloudBack = document.querySelector '.cloud-back'\r\n\r\n\tcloud = document.querySelector '.cloud'\r\n\r\n\tlogo = document.querySelector '.logo'\r\n\r\n\tlogo.style.opacity = 0\r\n\r\n\tlogo.style.webkitTransform = \"translateY(200px) rotateX(-80deg)\"\r\n\r\n\ti = 1\r\n\r\n\tj = 1\r\n\r\n\tsetTimeout =>\r\n\r\n\t\tlogo.style.webkitTransition = \"all 4s\"\r\n\r\n\t\tlogo.style.webkitTransform = \"translateY(1px) rotateX(1deg)\"\r\n\r\n\t\tlogo.style.opacity = 1\r\n\r\n\t, 10000\r\n\r\n\tlabelI = document.getElementById \"text-i\"\r\n\r\n\tlabelJ = document.getElementById \"text-j\"\r\n\r\n\r\n\tdo moveClouds = ->\r\n\r\n\t\t# if i < 900\r\n\r\n\t\t\t# cloud.style.left = parseInt(getComputedStyle(cloud).left) - 2 + 'px'\r\n\r\n\t\t\t# cloudBack.style.left = parseInt(getComputedStyle(cloudBack).left) - 1 + 'px'\r\n\r\n\t\tcss.setTransform cloud, \"scaleX(-1) translateX(#{i}px)\"\r\n\t\t# cloud.style.webkitTransform = \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\r\n\t\tcss.setTransform cloudBack, \"translateX(#{-j / 2}px)\"\r\n\t\t# css.setTransform cloudBack, \"translateX(#{-j}px)\"\r\n\r\n\t\t# cloudBack.style.webkitTransform = \"translateX(#{-j}px)\"\r\n\r\n\t\tif i > 6300\r\n\r\n\t\t\tcloud.style.webkitTransform = \"scaleX(-1) translateX(0)\"\r\n\r\n\t\t\ti = 1\r\n\r\n\t\tif j > 11100\r\n\r\n\t\t\tcloudBack.style.webkitTransform = \"translateX(0)\"\r\n\r\n\t\t\tj = 1\r\n\r\n\r\n\t\t\t# cloud.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloudBack.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloud.style.opacity = 0\r\n\r\n\t\t\t# cloudBack.style.opacity = 0\r\n\r\n\t\tlabelI.value = i\r\n\r\n\t\tlabelJ.value = j\r\n\r\n\t\ti++\r\n\r\n\t\tj++\r\n\r\n\t\t# cloud.style.webkitTransition = \"16\"\r\n\r\n\t\trequestAnimationFrame moveClouds\r\n\r\n\r\n","define ['css'], (css) ->\r\n\r\n\twindow.requestAnimationFrame = do ->\r\n\r\n\t\tif typeof window.requestAnimationFrame isnt 'undefined' then return requestAnimationFrame\r\n\r\n\t\tif typeof window.webkitRequestAnimationFrame isnt 'undefined' then return webkitRequestAnimationFrame\r\n\r\n\t\tif typeof window.mozRequestAnimationFrame isnt 'undefined' then return mozRequestAnimationFrame\r\n\r\n\t\t(cb) -> setTimeout cb, 16.66\r\n\r\n\t# window.requestAnimationFrame = requestAnimationFrame || webkitRequestAnimationFrame || mozRequestAnimationFrame || (cb) ->\r\n\r\n\t# \tsetTimeout cb, 16\r\n\r\n\t# console.log setTimeout\r\n\r\n\tsky = document.querySelector '.sky'\r\n\r\n\tcloudBack = document.querySelector '.cloud-back'\r\n\r\n\tcloud = document.querySelector '.cloud'\r\n\r\n\tlogo = document.querySelector '.logo'\r\n\r\n\tlogo.style.opacity = 0\r\n\r\n\tlogo.style.webkitTransform = \"translateY(200px) rotateX(-80deg)\"\r\n\r\n\ti = 1\r\n\r\n\tj = 1\r\n\r\n\tsetTimeout =>\r\n\r\n\t\tlogo.style.webkitTransition = \"all 4s\"\r\n\r\n\t\tlogo.style.webkitTransform = \"translateY(1px) rotateX(1deg)\"\r\n\r\n\t\tlogo.style.opacity = 1\r\n\r\n\t, 10000\r\n\r\n\tlabelI = document.getElementById \"text-i\"\r\n\r\n\tlabelJ = document.getElementById \"text-j\"\r\n\r\n\r\n\tdo moveClouds = ->\r\n\r\n\t\t# if i < 900\r\n\r\n\t\t\t# cloud.style.left = parseInt(getComputedStyle(cloud).left) - 2 + 'px'\r\n\r\n\t\t\t# cloudBack.style.left = parseInt(getComputedStyle(cloudBack).left) - 1 + 'px'\r\n\r\n\t\tcss.setTransform cloud, \"scaleX(-1) translateX(#{i}px)\"\r\n\t\t# cloud.style.webkitTransform = \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\r\n\t\tcss.setTransform cloudBack, \"translateX(#{-j / 2}px)\"\r\n\t\t# css.setTransform cloudBack, \"translateX(#{-j}px)\"\r\n\r\n\t\t# cloudBack.style.webkitTransform = \"translateX(#{-j}px)\"\r\n\r\n\t\tif i > 6300\r\n\r\n\t\t\tcloud.style.webkitTransform = \"scaleX(-1) translateX(0)\"\r\n\r\n\t\t\ti = 1\r\n\r\n\t\tif j > 11100\r\n\r\n\t\t\tcloudBack.style.webkitTransform = \"translateX(0)\"\r\n\r\n\t\t\tj = 1\r\n\r\n\r\n\t\t\t# cloud.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloudBack.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloud.style.opacity = 0\r\n\r\n\t\t\t# cloudBack.style.opacity = 0\r\n\r\n\t\t# labelI.value = i\r\n\r\n\t\t# labelJ.value = j\r\n\r\n\t\ti++\r\n\r\n\t\tj++\r\n\r\n\t\t# cloud.style.webkitTransition = \"16\"\r\n\r\n\t\trequestAnimationFrame moveClouds\r\n\r\n\r\n","define ['css'], (css) ->\r\n\r\n\twindow.requestAnimationFrame = do ->\r\n\r\n\t\tif typeof window.requestAnimationFrame isnt 'undefined' then return requestAnimationFrame\r\n\r\n\t\tif typeof window.webkitRequestAnimationFrame isnt 'undefined' then return webkitRequestAnimationFrame\r\n\r\n\t\tif typeof window.mozRequestAnimationFrame isnt 'undefined' then return mozRequestAnimationFrame\r\n\r\n\t\t(cb) -> setTimeout cb, 16.66\r\n\r\n\t# window.requestAnimationFrame = requestAnimationFrame || webkitRequestAnimationFrame || mozRequestAnimationFrame || (cb) ->\r\n\r\n\t# \tsetTimeout cb, 16\r\n\r\n\t# console.log setTimeout\r\n\r\n\tsky = document.querySelector '.sky'\r\n\r\n\tcloudBack = document.querySelector '.cloud-back'\r\n\r\n\tcloud = document.querySelector '.cloud'\r\n\r\n\tlogo = document.querySelector '.logo'\r\n\r\n\tlogo.style.opacity = 0\r\n\r\n\tlogo.style.webkitTransform = \"translateY(200px) rotateX(-80deg)\"\r\n\r\n\ti = 1\r\n\r\n\tj = 1\r\n\r\n\tsetTimeout =>\r\n\r\n\t\tlogo.style.webkitTransition = \"all 4s\"\r\n\r\n\t\tlogo.style.webkitTransform = \"translateY(1px) rotateX(1deg)\"\r\n\r\n\t\tlogo.style.opacity = 1\r\n\r\n\t, 20000\r\n\r\n\tlabelI = document.getElementById \"text-i\"\r\n\r\n\tlabelJ = document.getElementById \"text-j\"\r\n\r\n\r\n\tdo moveClouds = ->\r\n\r\n\t\t# if i < 900\r\n\r\n\t\t\t# cloud.style.left = parseInt(getComputedStyle(cloud).left) - 2 + 'px'\r\n\r\n\t\t\t# cloudBack.style.left = parseInt(getComputedStyle(cloudBack).left) - 1 + 'px'\r\n\r\n\t\tcss.setTransform cloud, \"scaleX(-1) translateX(#{i}px)\"\r\n\t\t# cloud.style.webkitTransform = \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\r\n\t\tcss.setTransform cloudBack, \"translateX(#{-j / 2}px)\"\r\n\t\t# css.setTransform cloudBack, \"translateX(#{-j}px)\"\r\n\r\n\t\t# cloudBack.style.webkitTransform = \"translateX(#{-j}px)\"\r\n\r\n\t\tif i > 6300\r\n\r\n\t\t\tcloud.style.webkitTransform = \"scaleX(-1) translateX(0)\"\r\n\r\n\t\t\ti = 1\r\n\r\n\t\tif j > 11100\r\n\r\n\t\t\tcloudBack.style.webkitTransform = \"translateX(0)\"\r\n\r\n\t\t\tj = 1\r\n\r\n\r\n\t\t\t# cloud.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloudBack.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloud.style.opacity = 0\r\n\r\n\t\t\t# cloudBack.style.opacity = 0\r\n\r\n\t\t# labelI.value = i\r\n\r\n\t\t# labelJ.value = j\r\n\r\n\t\ti++\r\n\r\n\t\tj++\r\n\r\n\t\t# cloud.style.webkitTransition = \"16\"\r\n\r\n\t\trequestAnimationFrame moveClouds\r\n\r\n\r\n","define ['css'], (css) ->\r\n\r\n\twindow.requestAnimationFrame = do ->\r\n\r\n\t\tif typeof window.requestAnimationFrame isnt 'undefined' then return requestAnimationFrame\r\n\r\n\t\tif typeof window.webkitRequestAnimationFrame isnt 'undefined' then return webkitRequestAnimationFrame\r\n\r\n\t\tif typeof window.mozRequestAnimationFrame isnt 'undefined' then return mozRequestAnimationFrame\r\n\r\n\t\t(cb) -> setTimeout cb, 16.66\r\n\r\n\t# window.requestAnimationFrame = requestAnimationFrame || webkitRequestAnimationFrame || mozRequestAnimationFrame || (cb) ->\r\n\r\n\t# \tsetTimeout cb, 16\r\n\r\n\t# console.log setTimeout\r\n\r\n\tsky = document.querySelector '.sky'\r\n\r\n\tclouds = document.querySelector '.clouds'\r\n\r\n\tcloudBack = document.querySelector '.cloud-back'\r\n\r\n\tcloud = document.querySelector '.cloud'\r\n\r\n\tlogo = document.querySelector '.logo'\r\n\r\n\tlogo.style.opacity = 0\r\n\r\n\tlogo.style.webkitTransform = \"translateY(200px) rotateX(-80deg)\"\r\n\r\n\ti = 1\r\n\r\n\tj = 1\r\n\r\n\tsetTimeout =>\r\n\r\n\t\tlogo.style.webkitTransition = \"all 4s\"\r\n\r\n\t\tlogo.style.webkitTransform = \"translateY(1px) rotateX(1deg)\"\r\n\r\n\t\tlogo.style.opacity = 1\r\n\r\n\t, 20000\r\n\r\n\tlabelI = document.getElementById \"text-i\"\r\n\r\n\tlabelJ = document.getElementById \"text-j\"\r\n\r\n\r\n\tdo moveClouds = ->\r\n\r\n\t\t# if i < 900\r\n\r\n\t\t\t# cloud.style.left = parseInt(getComputedStyle(cloud).left) - 2 + 'px'\r\n\r\n\t\t\t# cloudBack.style.left = parseInt(getComputedStyle(cloudBack).left) - 1 + 'px'\r\n\r\n\t\tcss.setTransform cloud, \"scaleX(-1) translateX(#{i}px)\"\r\n\t\t# cloud.style.webkitTransform = \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\r\n\t\tcss.setTransform cloudBack, \"translateX(#{-j / 2}px)\"\r\n\t\t# css.setTransform cloudBack, \"translateX(#{-j}px)\"\r\n\r\n\t\t# cloudBack.style.webkitTransform = \"translateX(#{-j}px)\"\r\n\r\n\t\tif i > 6300\r\n\r\n\t\t\tcloud.style.webkitTransform = \"scaleX(-1) translateX(0)\"\r\n\r\n\t\t\ti = 1\r\n\r\n\t\tif j > 11100\r\n\r\n\t\t\tcloudBack.style.webkitTransform = \"translateX(0)\"\r\n\r\n\t\t\tj = 1\r\n\r\n\r\n\t\t\t# cloud.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloudBack.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloud.style.opacity = 0\r\n\r\n\t\t\t# cloudBack.style.opacity = 0\r\n\r\n\t\t# labelI.value = i\r\n\r\n\t\t# labelJ.value = j\r\n\r\n\t\ti++\r\n\r\n\t\tj++\r\n\r\n\t\t# cloud.style.webkitTransition = \"16\"\r\n\r\n\t\trequestAnimationFrame moveClouds\r\n\r\n\r\n\tlogo.addEventListener \"click\", (e) ->\r\n\r\n\t\tclouds.style.webkitTransition = \"1s\"\r\n\r\n\t\tclouds.style.webkitTransform = \"translateY(-200px)\"\r\n","define ['css'], (css) ->\r\n\r\n\twindow.requestAnimationFrame = do ->\r\n\r\n\t\tif typeof window.requestAnimationFrame isnt 'undefined' then return requestAnimationFrame\r\n\r\n\t\tif typeof window.webkitRequestAnimationFrame isnt 'undefined' then return webkitRequestAnimationFrame\r\n\r\n\t\tif typeof window.mozRequestAnimationFrame isnt 'undefined' then return mozRequestAnimationFrame\r\n\r\n\t\t(cb) -> setTimeout cb, 16.66\r\n\r\n\t# window.requestAnimationFrame = requestAnimationFrame || webkitRequestAnimationFrame || mozRequestAnimationFrame || (cb) ->\r\n\r\n\t# \tsetTimeout cb, 16\r\n\r\n\t# console.log setTimeout\r\n\r\n\tsky = document.querySelector '.sky'\r\n\r\n\tclouds = document.querySelector '.clouds'\r\n\r\n\tcloudBack = document.querySelector '.cloud-back'\r\n\r\n\tcloud = document.querySelector '.cloud'\r\n\r\n\tlogo = document.querySelector '.logo'\r\n\r\n\tlogo.style.opacity = 0\r\n\r\n\tlogo.style.webkitTransform = \"translateY(200px) rotateX(-80deg)\"\r\n\r\n\ti = 1\r\n\r\n\tj = 1\r\n\r\n\tsetTimeout =>\r\n\r\n\t\tlogo.style.webkitTransition = \"all 4s\"\r\n\r\n\t\tlogo.style.webkitTransform = \"translateY(1px) rotateX(1deg)\"\r\n\r\n\t\tlogo.style.opacity = 1\r\n\r\n\t, 20000\r\n\r\n\tlabelI = document.getElementById \"text-i\"\r\n\r\n\tlabelJ = document.getElementById \"text-j\"\r\n\r\n\r\n\tdo moveClouds = ->\r\n\r\n\t\t# if i < 900\r\n\r\n\t\t\t# cloud.style.left = parseInt(getComputedStyle(cloud).left) - 2 + 'px'\r\n\r\n\t\t\t# cloudBack.style.left = parseInt(getComputedStyle(cloudBack).left) - 1 + 'px'\r\n\r\n\t\tcss.setTransform cloud, \"scaleX(-1) translateX(#{i}px)\"\r\n\t\t# cloud.style.webkitTransform = \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\r\n\t\tcss.setTransform cloudBack, \"translateX(#{-j / 2}px)\"\r\n\t\t# css.setTransform cloudBack, \"translateX(#{-j}px)\"\r\n\r\n\t\t# cloudBack.style.webkitTransform = \"translateX(#{-j}px)\"\r\n\r\n\t\tif i > 6300\r\n\r\n\t\t\tcloud.style.webkitTransform = \"scaleX(-1) translateX(0)\"\r\n\r\n\t\t\ti = 1\r\n\r\n\t\tif j > 11100\r\n\r\n\t\t\tcloudBack.style.webkitTransform = \"translateX(0)\"\r\n\r\n\t\t\tj = 1\r\n\r\n\r\n\t\t\t# cloud.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloudBack.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloud.style.opacity = 0\r\n\r\n\t\t\t# cloudBack.style.opacity = 0\r\n\r\n\t\t# labelI.value = i\r\n\r\n\t\t# labelJ.value = j\r\n\r\n\t\ti++\r\n\r\n\t\tj++\r\n\r\n\t\t# cloud.style.webkitTransition = \"16\"\r\n\r\n\t\trequestAnimationFrame moveClouds\r\n\r\n\r\n\tlogo.addEventListener \"click\", (e) ->\r\n\r\n\t\tclouds.style.webkitTransition = \"1s\"\r\n\r\n\t\tclouds.style.webkitTransform = \"rotateX(-80deg) translateY(-200px)\"\r\n","define ['css'], (css) ->\r\n\r\n\twindow.requestAnimationFrame = do ->\r\n\r\n\t\tif typeof window.requestAnimationFrame isnt 'undefined' then return requestAnimationFrame\r\n\r\n\t\tif typeof window.webkitRequestAnimationFrame isnt 'undefined' then return webkitRequestAnimationFrame\r\n\r\n\t\tif typeof window.mozRequestAnimationFrame isnt 'undefined' then return mozRequestAnimationFrame\r\n\r\n\t\t(cb) -> setTimeout cb, 16.66\r\n\r\n\t# window.requestAnimationFrame = requestAnimationFrame || webkitRequestAnimationFrame || mozRequestAnimationFrame || (cb) ->\r\n\r\n\t# \tsetTimeout cb, 16\r\n\r\n\t# console.log setTimeout\r\n\r\n\tsky = document.querySelector '.sky'\r\n\r\n\tclouds = document.querySelector '.clouds'\r\n\r\n\tcloudBack = document.querySelector '.cloud-back'\r\n\r\n\tcloud = document.querySelector '.cloud'\r\n\r\n\tlogo = document.querySelector '.logo'\r\n\r\n\tlogo.style.opacity = 0\r\n\r\n\tlogo.style.webkitTransform = \"translateY(200px) rotateX(-80deg)\"\r\n\r\n\ti = 1\r\n\r\n\tj = 1\r\n\r\n\tsetTimeout =>\r\n\r\n\t\tlogo.style.webkitTransition = \"all 4s\"\r\n\r\n\t\tlogo.style.webkitTransform = \"translateY(1px) rotateX(1deg)\"\r\n\r\n\t\tlogo.style.opacity = 1\r\n\r\n\t, 20000\r\n\r\n\tlabelI = document.getElementById \"text-i\"\r\n\r\n\tlabelJ = document.getElementById \"text-j\"\r\n\r\n\r\n\tdo moveClouds = ->\r\n\r\n\t\t# if i < 900\r\n\r\n\t\t\t# cloud.style.left = parseInt(getComputedStyle(cloud).left) - 2 + 'px'\r\n\r\n\t\t\t# cloudBack.style.left = parseInt(getComputedStyle(cloudBack).left) - 1 + 'px'\r\n\r\n\t\tcss.setTransform cloud, \"scaleX(-1) translateX(#{i}px)\"\r\n\t\t# cloud.style.webkitTransform = \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\r\n\t\tcss.setTransform cloudBack, \"translateX(#{-j / 2}px)\"\r\n\t\t# css.setTransform cloudBack, \"translateX(#{-j}px)\"\r\n\r\n\t\t# cloudBack.style.webkitTransform = \"translateX(#{-j}px)\"\r\n\r\n\t\tif i > 6300\r\n\r\n\t\t\tcloud.style.webkitTransform = \"scaleX(-1) translateX(0)\"\r\n\r\n\t\t\ti = 1\r\n\r\n\t\tif j > 11100\r\n\r\n\t\t\tcloudBack.style.webkitTransform = \"translateX(0)\"\r\n\r\n\t\t\tj = 1\r\n\r\n\r\n\t\t\t# cloud.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloudBack.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloud.style.opacity = 0\r\n\r\n\t\t\t# cloudBack.style.opacity = 0\r\n\r\n\t\t# labelI.value = i\r\n\r\n\t\t# labelJ.value = j\r\n\r\n\t\ti++\r\n\r\n\t\tj++\r\n\r\n\t\t# cloud.style.webkitTransition = \"16\"\r\n\r\n\t\trequestAnimationFrame moveClouds\r\n\r\n\r\n\tdocument.addEventListener \"click\", (e) ->\r\n\r\n\t\tclouds.style.webkitTransition = \"1s\"\r\n\r\n\t\tclouds.style.webkitTransform = \"rotateX(-80deg) translateY(-200px)\"\r\n","define ['css'], (css) ->\r\n\r\n\twindow.requestAnimationFrame = do ->\r\n\r\n\t\tif typeof window.requestAnimationFrame isnt 'undefined' then return requestAnimationFrame\r\n\r\n\t\tif typeof window.webkitRequestAnimationFrame isnt 'undefined' then return webkitRequestAnimationFrame\r\n\r\n\t\tif typeof window.mozRequestAnimationFrame isnt 'undefined' then return mozRequestAnimationFrame\r\n\r\n\t\t(cb) -> setTimeout cb, 16.66\r\n\r\n\t# window.requestAnimationFrame = requestAnimationFrame || webkitRequestAnimationFrame || mozRequestAnimationFrame || (cb) ->\r\n\r\n\t# \tsetTimeout cb, 16\r\n\r\n\t# console.log setTimeout\r\n\r\n\tsky = document.querySelector '.sky'\r\n\r\n\tclouds = document.querySelector '.clouds'\r\n\r\n\tcloudBack = document.querySelector '.cloud-back'\r\n\r\n\tcloud = document.querySelector '.cloud'\r\n\r\n\tlogo = document.querySelector '.logo'\r\n\r\n\tlogo.style.opacity = 0\r\n\r\n\tlogo.style.webkitTransform = \"translateY(200px) rotateX(-80deg)\"\r\n\r\n\ti = 1\r\n\r\n\tj = 1\r\n\r\n\tsetTimeout =>\r\n\r\n\t\tlogo.style.webkitTransition = \"all 4s\"\r\n\r\n\t\tlogo.style.webkitTransform = \"translateY(1px) rotateX(1deg)\"\r\n\r\n\t\tlogo.style.opacity = 1\r\n\r\n\t, 20000\r\n\r\n\tlabelI = document.getElementById \"text-i\"\r\n\r\n\tlabelJ = document.getElementById \"text-j\"\r\n\r\n\r\n\tdo moveClouds = ->\r\n\r\n\t\t# if i < 900\r\n\r\n\t\t\t# cloud.style.left = parseInt(getComputedStyle(cloud).left) - 2 + 'px'\r\n\r\n\t\t\t# cloudBack.style.left = parseInt(getComputedStyle(cloudBack).left) - 1 + 'px'\r\n\r\n\t\tcss.setTransform cloud, \"scaleX(-1) translateX(#{i}px)\"\r\n\t\t# cloud.style.webkitTransform = \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\r\n\t\tcss.setTransform cloudBack, \"translateX(#{-j / 2}px)\"\r\n\t\t# css.setTransform cloudBack, \"translateX(#{-j}px)\"\r\n\r\n\t\t# cloudBack.style.webkitTransform = \"translateX(#{-j}px)\"\r\n\r\n\t\tif i > 6300\r\n\r\n\t\t\tcloud.style.webkitTransform = \"scaleX(-1) translateX(0)\"\r\n\r\n\t\t\ti = 1\r\n\r\n\t\tif j > 11100\r\n\r\n\t\t\tcloudBack.style.webkitTransform = \"translateX(0)\"\r\n\r\n\t\t\tj = 1\r\n\r\n\r\n\t\t\t# cloud.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloudBack.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloud.style.opacity = 0\r\n\r\n\t\t\t# cloudBack.style.opacity = 0\r\n\r\n\t\t# labelI.value = i\r\n\r\n\t\t# labelJ.value = j\r\n\r\n\t\ti++\r\n\r\n\t\tj++\r\n\r\n\t\t# cloud.style.webkitTransition = \"16\"\r\n\r\n\t\trequestAnimationFrame moveClouds\r\n\r\n\r\n\tdocument.addEventListener \"click\", (e) ->\r\n\r\n\t\tclouds.style.webkitTransition = \"all 2s\"\r\n\r\n\t\tclouds.style.webkitTransform = \"rotateX(-80deg) translateY(-200px)\"\r\n","define ['css'], (css) ->\r\n\r\n\twindow.requestAnimationFrame = do ->\r\n\r\n\t\tif typeof window.requestAnimationFrame isnt 'undefined' then return requestAnimationFrame\r\n\r\n\t\tif typeof window.webkitRequestAnimationFrame isnt 'undefined' then return webkitRequestAnimationFrame\r\n\r\n\t\tif typeof window.mozRequestAnimationFrame isnt 'undefined' then return mozRequestAnimationFrame\r\n\r\n\t\t(cb) -> setTimeout cb, 16.66\r\n\r\n\t# window.requestAnimationFrame = requestAnimationFrame || webkitRequestAnimationFrame || mozRequestAnimationFrame || (cb) ->\r\n\r\n\t# \tsetTimeout cb, 16\r\n\r\n\t# console.log setTimeout\r\n\r\n\tsky = document.querySelector '.sky'\r\n\r\n\tclouds = document.querySelector '.clouds'\r\n\r\n\tcloudBack = document.querySelector '.cloud-back'\r\n\r\n\tcloud = document.querySelector '.cloud'\r\n\r\n\tlogo = document.querySelector '.logo'\r\n\r\n\tlogo.style.opacity = 0\r\n\r\n\tlogo.style.webkitTransform = \"translateY(200px) rotateX(-80deg)\"\r\n\r\n\ti = 1\r\n\r\n\tj = 1\r\n\r\n\tsetTimeout =>\r\n\r\n\t\tlogo.style.webkitTransition = \"all 4s\"\r\n\r\n\t\tlogo.style.webkitTransform = \"translateY(1px) rotateX(1deg)\"\r\n\r\n\t\tlogo.style.opacity = 1\r\n\r\n\t, 20000\r\n\r\n\tlabelI = document.getElementById \"text-i\"\r\n\r\n\tlabelJ = document.getElementById \"text-j\"\r\n\r\n\r\n\tdo moveClouds = ->\r\n\r\n\t\t# if i < 900\r\n\r\n\t\t\t# cloud.style.left = parseInt(getComputedStyle(cloud).left) - 2 + 'px'\r\n\r\n\t\t\t# cloudBack.style.left = parseInt(getComputedStyle(cloudBack).left) - 1 + 'px'\r\n\r\n\t\tcss.setTransform cloud, \"scaleX(-1) translateX(#{i}px)\"\r\n\t\t# cloud.style.webkitTransform = \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\r\n\t\tcss.setTransform cloudBack, \"translateX(#{-j / 2}px)\"\r\n\t\t# css.setTransform cloudBack, \"translateX(#{-j}px)\"\r\n\r\n\t\t# cloudBack.style.webkitTransform = \"translateX(#{-j}px)\"\r\n\r\n\t\tif i > 6300\r\n\r\n\t\t\tcloud.style.webkitTransform = \"scaleX(-1) translateX(0)\"\r\n\r\n\t\t\ti = 1\r\n\r\n\t\tif j > 11100\r\n\r\n\t\t\tcloudBack.style.webkitTransform = \"translateX(0)\"\r\n\r\n\t\t\tj = 1\r\n\r\n\r\n\t\t\t# cloud.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloudBack.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloud.style.opacity = 0\r\n\r\n\t\t\t# cloudBack.style.opacity = 0\r\n\r\n\t\t# labelI.value = i\r\n\r\n\t\t# labelJ.value = j\r\n\r\n\t\ti++\r\n\r\n\t\tj++\r\n\r\n\t\t# cloud.style.webkitTransition = \"16\"\r\n\r\n\t\trequestAnimationFrame moveClouds\r\n\r\n\r\n\tdocument.addEventListener \"click\", (e) ->\r\n\r\n\t\tclouds.style.webkitTransition = \"webkit-transform 2s\"\r\n\r\n\t\tclouds.style.webkitTransform = \"rotateX(-80deg) translateY(-200px)\"\r\n","define ['css'], (css) ->\r\n\r\n\twindow.requestAnimationFrame = do ->\r\n\r\n\t\tif typeof window.requestAnimationFrame isnt 'undefined' then return requestAnimationFrame\r\n\r\n\t\tif typeof window.webkitRequestAnimationFrame isnt 'undefined' then return webkitRequestAnimationFrame\r\n\r\n\t\tif typeof window.mozRequestAnimationFrame isnt 'undefined' then return mozRequestAnimationFrame\r\n\r\n\t\t(cb) -> setTimeout cb, 16.66\r\n\r\n\t# window.requestAnimationFrame = requestAnimationFrame || webkitRequestAnimationFrame || mozRequestAnimationFrame || (cb) ->\r\n\r\n\t# \tsetTimeout cb, 16\r\n\r\n\t# console.log setTimeout\r\n\r\n\tsky = document.querySelector '.sky'\r\n\r\n\tclouds = document.querySelector '.clouds'\r\n\r\n\tcloudBack = document.querySelector '.cloud-back'\r\n\r\n\tcloud = document.querySelector '.cloud'\r\n\r\n\tlogo = document.querySelector '.logo'\r\n\r\n\tlogo.style.opacity = 0\r\n\r\n\tlogo.style.webkitTransform = \"translateY(200px) rotateX(-80deg)\"\r\n\r\n\ti = 1\r\n\r\n\tj = 1\r\n\r\n\tsetTimeout =>\r\n\r\n\t\tlogo.style.webkitTransition = \"all 4s\"\r\n\r\n\t\tlogo.style.webkitTransform = \"translateY(1px) rotateX(1deg)\"\r\n\r\n\t\tlogo.style.opacity = 1\r\n\r\n\t, 20000\r\n\r\n\tlabelI = document.getElementById \"text-i\"\r\n\r\n\tlabelJ = document.getElementById \"text-j\"\r\n\r\n\r\n\tdo moveClouds = ->\r\n\r\n\t\t# if i < 900\r\n\r\n\t\t\t# cloud.style.left = parseInt(getComputedStyle(cloud).left) - 2 + 'px'\r\n\r\n\t\t\t# cloudBack.style.left = parseInt(getComputedStyle(cloudBack).left) - 1 + 'px'\r\n\r\n\t\tcss.setTransform cloud, \"scaleX(-1) translateX(#{i}px)\"\r\n\t\t# cloud.style.webkitTransform = \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\r\n\t\tcss.setTransform cloudBack, \"translateX(#{-j / 2}px)\"\r\n\t\t# css.setTransform cloudBack, \"translateX(#{-j}px)\"\r\n\r\n\t\t# cloudBack.style.webkitTransform = \"translateX(#{-j}px)\"\r\n\r\n\t\tif i > 6300\r\n\r\n\t\t\tcloud.style.webkitTransform = \"scaleX(-1) translateX(0)\"\r\n\r\n\t\t\ti = 1\r\n\r\n\t\tif j > 11100\r\n\r\n\t\t\tcloudBack.style.webkitTransform = \"translateX(0)\"\r\n\r\n\t\t\tj = 1\r\n\r\n\r\n\t\t\t# cloud.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloudBack.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloud.style.opacity = 0\r\n\r\n\t\t\t# cloudBack.style.opacity = 0\r\n\r\n\t\t# labelI.value = i\r\n\r\n\t\t# labelJ.value = j\r\n\r\n\t\ti++\r\n\r\n\t\tj++\r\n\r\n\t\t# cloud.style.webkitTransition = \"16\"\r\n\r\n\t\trequestAnimationFrame moveClouds\r\n\r\n\r\n\tdocument.addEventListener \"click\", (e) ->\r\n\r\n\t\t# clouds.style.webkitTransition = \"webkit-transform 2s\"\r\n\r\n\t\tclouds.style.webkitTransform = \"rotateX(-80deg) translateY(-200px)\"\r\n","define ['css'], (css) ->\r\n\r\n\twindow.requestAnimationFrame = do ->\r\n\r\n\t\tif typeof window.requestAnimationFrame isnt 'undefined' then return requestAnimationFrame\r\n\r\n\t\tif typeof window.webkitRequestAnimationFrame isnt 'undefined' then return webkitRequestAnimationFrame\r\n\r\n\t\tif typeof window.mozRequestAnimationFrame isnt 'undefined' then return mozRequestAnimationFrame\r\n\r\n\t\t(cb) -> setTimeout cb, 16.66\r\n\r\n\t# window.requestAnimationFrame = requestAnimationFrame || webkitRequestAnimationFrame || mozRequestAnimationFrame || (cb) ->\r\n\r\n\t# \tsetTimeout cb, 16\r\n\r\n\t# console.log setTimeout\r\n\r\n\tsky = document.querySelector '.sky'\r\n\r\n\tclouds = document.querySelector '.clouds'\r\n\r\n\tcloudBack = document.querySelector '.cloud-back'\r\n\r\n\tcloud = document.querySelector '.cloud'\r\n\r\n\tlogo = document.querySelector '.logo'\r\n\r\n\tlogo.style.opacity = 0\r\n\r\n\tlogo.style.webkitTransform = \"translateY(200px) rotateX(-80deg)\"\r\n\r\n\ti = 1\r\n\r\n\tj = 1\r\n\r\n\tsetTimeout =>\r\n\r\n\t\tlogo.style.webkitTransition = \"all 4s\"\r\n\r\n\t\tlogo.style.webkitTransform = \"translateY(1px) rotateX(1deg)\"\r\n\r\n\t\tlogo.style.opacity = 1\r\n\r\n\t, 20000\r\n\r\n\tlabelI = document.getElementById \"text-i\"\r\n\r\n\tlabelJ = document.getElementById \"text-j\"\r\n\r\n\r\n\tdo moveClouds = ->\r\n\r\n\t\t# if i < 900\r\n\r\n\t\t\t# cloud.style.left = parseInt(getComputedStyle(cloud).left) - 2 + 'px'\r\n\r\n\t\t\t# cloudBack.style.left = parseInt(getComputedStyle(cloudBack).left) - 1 + 'px'\r\n\r\n\t\tcss.setTransform cloud, \"scaleX(-1) translateX(#{i}px)\"\r\n\t\t# cloud.style.webkitTransform = \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\r\n\t\tcss.setTransform cloudBack, \"translateX(#{-j / 2}px)\"\r\n\t\t# css.setTransform cloudBack, \"translateX(#{-j}px)\"\r\n\r\n\t\t# cloudBack.style.webkitTransform = \"translateX(#{-j}px)\"\r\n\r\n\t\tif i > 6300\r\n\r\n\t\t\tcloud.style.webkitTransform = \"scaleX(-1) translateX(0)\"\r\n\r\n\t\t\ti = 1\r\n\r\n\t\tif j > 11100\r\n\r\n\t\t\tcloudBack.style.webkitTransform = \"translateX(0)\"\r\n\r\n\t\t\tj = 1\r\n\r\n\r\n\t\t\t# cloud.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloudBack.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloud.style.opacity = 0\r\n\r\n\t\t\t# cloudBack.style.opacity = 0\r\n\r\n\t\t# labelI.value = i\r\n\r\n\t\t# labelJ.value = j\r\n\r\n\t\ti++\r\n\r\n\t\tj++\r\n\r\n\t\t# cloud.style.webkitTransition = \"16\"\r\n\r\n\t\trequestAnimationFrame moveClouds\r\n\r\n\r\n\tdocument.addEventListener \"click\", (e) ->\r\n\r\n\t\t# clouds.style.webkitTransition = \"webkit-transform 2s\"\r\n\r\n\t\tclouds.style.webkitTransform = \"rotateX(-80deg)\"\r\n","define ['css'], (css) ->\r\n\r\n\twindow.requestAnimationFrame = do ->\r\n\r\n\t\tif typeof window.requestAnimationFrame isnt 'undefined' then return requestAnimationFrame\r\n\r\n\t\tif typeof window.webkitRequestAnimationFrame isnt 'undefined' then return webkitRequestAnimationFrame\r\n\r\n\t\tif typeof window.mozRequestAnimationFrame isnt 'undefined' then return mozRequestAnimationFrame\r\n\r\n\t\t(cb) -> setTimeout cb, 16.66\r\n\r\n\t# window.requestAnimationFrame = requestAnimationFrame || webkitRequestAnimationFrame || mozRequestAnimationFrame || (cb) ->\r\n\r\n\t# \tsetTimeout cb, 16\r\n\r\n\t# console.log setTimeout\r\n\r\n\tsky = document.querySelector '.sky'\r\n\r\n\tclouds = document.querySelector '.clouds'\r\n\r\n\tcloudBack = document.querySelector '.cloud-back'\r\n\r\n\tcloud = document.querySelector '.cloud'\r\n\r\n\tlogo = document.querySelector '.logo'\r\n\r\n\tlogo.style.opacity = 0\r\n\r\n\tlogo.style.webkitTransform = \"translateY(200px) rotateX(-80deg)\"\r\n\r\n\ti = 1\r\n\r\n\tj = 1\r\n\r\n\tsetTimeout =>\r\n\r\n\t\tlogo.style.webkitTransition = \"all 4s\"\r\n\r\n\t\tlogo.style.webkitTransform = \"translateY(1px) rotateX(1deg)\"\r\n\r\n\t\tlogo.style.opacity = 1\r\n\r\n\t, 20000\r\n\r\n\tlabelI = document.getElementById \"text-i\"\r\n\r\n\tlabelJ = document.getElementById \"text-j\"\r\n\r\n\r\n\tdo moveClouds = ->\r\n\r\n\t\t# if i < 900\r\n\r\n\t\t\t# cloud.style.left = parseInt(getComputedStyle(cloud).left) - 2 + 'px'\r\n\r\n\t\t\t# cloudBack.style.left = parseInt(getComputedStyle(cloudBack).left) - 1 + 'px'\r\n\r\n\t\tcss.setTransform cloud, \"scaleX(-1) translateX(#{i}px)\"\r\n\t\t# cloud.style.webkitTransform = \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\r\n\t\tcss.setTransform cloudBack, \"translateX(#{-j / 2}px)\"\r\n\t\t# css.setTransform cloudBack, \"translateX(#{-j}px)\"\r\n\r\n\t\t# cloudBack.style.webkitTransform = \"translateX(#{-j}px)\"\r\n\r\n\t\tif i > 6300\r\n\r\n\t\t\tcloud.style.webkitTransform = \"scaleX(-1) translateX(0)\"\r\n\r\n\t\t\ti = 1\r\n\r\n\t\tif j > 11100\r\n\r\n\t\t\tcloudBack.style.webkitTransform = \"translateX(0)\"\r\n\r\n\t\t\tj = 1\r\n\r\n\r\n\t\t\t# cloud.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloudBack.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloud.style.opacity = 0\r\n\r\n\t\t\t# cloudBack.style.opacity = 0\r\n\r\n\t\t# labelI.value = i\r\n\r\n\t\t# labelJ.value = j\r\n\r\n\t\ti++\r\n\r\n\t\tj++\r\n\r\n\t\t# cloud.style.webkitTransition = \"16\"\r\n\r\n\t\trequestAnimationFrame moveClouds\r\n\r\n\r\n\tdocument.addEventListener \"click\", (e) ->\r\n\r\n\t\tclouds.style.webkitTransition = \"all 2s\"\r\n\r\n\t\tclouds.style.webkitTransform = \"rotateX(-80deg)\"\r\n","define ['css'], (css) ->\r\n\r\n\twindow.requestAnimationFrame = do ->\r\n\r\n\t\tif typeof window.requestAnimationFrame isnt 'undefined' then return requestAnimationFrame\r\n\r\n\t\tif typeof window.webkitRequestAnimationFrame isnt 'undefined' then return webkitRequestAnimationFrame\r\n\r\n\t\tif typeof window.mozRequestAnimationFrame isnt 'undefined' then return mozRequestAnimationFrame\r\n\r\n\t\t(cb) -> setTimeout cb, 16.66\r\n\r\n\t# window.requestAnimationFrame = requestAnimationFrame || webkitRequestAnimationFrame || mozRequestAnimationFrame || (cb) ->\r\n\r\n\t# \tsetTimeout cb, 16\r\n\r\n\t# console.log setTimeout\r\n\r\n\tsky = document.querySelector '.sky'\r\n\r\n\tclouds = document.querySelector '.clouds'\r\n\r\n\tcloudBack = document.querySelector '.cloud-back'\r\n\r\n\tcloud = document.querySelector '.cloud'\r\n\r\n\tlogo = document.querySelector '.logo'\r\n\r\n\tlogo.style.opacity = 0\r\n\r\n\tlogo.style.webkitTransform = \"translateY(200px) rotateX(-80deg)\"\r\n\r\n\ti = 1\r\n\r\n\tj = 1\r\n\r\n\tsetTimeout =>\r\n\r\n\t\tlogo.style.webkitTransition = \"all 4s\"\r\n\r\n\t\tlogo.style.webkitTransform = \"translateY(1px) rotateX(1deg)\"\r\n\r\n\t\tlogo.style.opacity = 1\r\n\r\n\t, 20000\r\n\r\n\tlabelI = document.getElementById \"text-i\"\r\n\r\n\tlabelJ = document.getElementById \"text-j\"\r\n\r\n\r\n\tdo moveClouds = ->\r\n\r\n\t\t# if i < 900\r\n\r\n\t\t\t# cloud.style.left = parseInt(getComputedStyle(cloud).left) - 2 + 'px'\r\n\r\n\t\t\t# cloudBack.style.left = parseInt(getComputedStyle(cloudBack).left) - 1 + 'px'\r\n\r\n\t\tcss.setTransform cloud, \"scaleX(-1) translateX(#{i}px)\"\r\n\t\t# cloud.style.webkitTransform = \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\r\n\t\tcss.setTransform cloudBack, \"translateX(#{-j / 2}px)\"\r\n\t\t# css.setTransform cloudBack, \"translateX(#{-j}px)\"\r\n\r\n\t\t# cloudBack.style.webkitTransform = \"translateX(#{-j}px)\"\r\n\r\n\t\tif i > 6300\r\n\r\n\t\t\tcloud.style.webkitTransform = \"scaleX(-1) translateX(0)\"\r\n\r\n\t\t\ti = 1\r\n\r\n\t\tif j > 11100\r\n\r\n\t\t\tcloudBack.style.webkitTransform = \"translateX(0)\"\r\n\r\n\t\t\tj = 1\r\n\r\n\r\n\t\t\t# cloud.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloudBack.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloud.style.opacity = 0\r\n\r\n\t\t\t# cloudBack.style.opacity = 0\r\n\r\n\t\t# labelI.value = i\r\n\r\n\t\t# labelJ.value = j\r\n\r\n\t\ti++\r\n\r\n\t\tj++\r\n\r\n\t\t# cloud.style.webkitTransition = \"16\"\r\n\r\n\t\trequestAnimationFrame moveClouds\r\n\r\n\r\n\tdocument.addEventListener \"click\", (e) ->\r\n\r\n\t\tclouds.style.webkitTransition = \"all 2s\"\r\n\r\n\t\tclouds.style.webkitTransform = \"rotateX(-80deg)\"\r\n","define ['css'], (css) ->\r\n\r\n\twindow.requestAnimationFrame = do ->\r\n\r\n\t\tif typeof window.requestAnimationFrame isnt 'undefined' then return requestAnimationFrame\r\n\r\n\t\tif typeof window.webkitRequestAnimationFrame isnt 'undefined' then return webkitRequestAnimationFrame\r\n\r\n\t\tif typeof window.mozRequestAnimationFrame isnt 'undefined' then return mozRequestAnimationFrame\r\n\r\n\t\t(cb) -> setTimeout cb, 16.66\r\n\r\n\t# window.requestAnimationFrame = requestAnimationFrame || webkitRequestAnimationFrame || mozRequestAnimationFrame || (cb) ->\r\n\r\n\t# \tsetTimeout cb, 16\r\n\r\n\t# console.log setTimeout\r\n\r\n\tsky = document.querySelector '.sky'\r\n\r\n\tclouds = document.querySelector '.clouds'\r\n\r\n\tcloudBack = document.querySelector '.cloud-back'\r\n\r\n\tcloud = document.querySelector '.cloud'\r\n\r\n\tlogo = document.querySelector '.logo'\r\n\r\n\tlogo.style.opacity = 0\r\n\r\n\tlogo.style.webkitTransform = \"translateY(200px) rotateX(-80deg)\"\r\n\r\n\ti = 1\r\n\r\n\tj = 1\r\n\r\n\tsetTimeout =>\r\n\r\n\t\tlogo.style.webkitTransition = \"all 4s\"\r\n\r\n\t\tlogo.style.webkitTransform = \"translateY(1px) rotateX(1deg)\"\r\n\r\n\t\tlogo.style.opacity = 1\r\n\r\n\t, 20000\r\n\r\n\tlabelI = document.getElementById \"text-i\"\r\n\r\n\tlabelJ = document.getElementById \"text-j\"\r\n\r\n\r\n\tdo moveClouds = ->\r\n\r\n\t\t# if i < 900\r\n\r\n\t\t\t# cloud.style.left = parseInt(getComputedStyle(cloud).left) - 2 + 'px'\r\n\r\n\t\t\t# cloudBack.style.left = parseInt(getComputedStyle(cloudBack).left) - 1 + 'px'\r\n\r\n\t\tcss.setTransform cloud, \"scaleX(-1) translateX(#{i}px)\"\r\n\t\t# cloud.style.webkitTransform = \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\r\n\t\tcss.setTransform cloudBack, \"translateX(#{-j / 2}px)\"\r\n\t\t# css.setTransform cloudBack, \"translateX(#{-j}px)\"\r\n\r\n\t\t# cloudBack.style.webkitTransform = \"translateX(#{-j}px)\"\r\n\r\n\t\tif i > 6300\r\n\r\n\t\t\tcloud.style.webkitTransform = \"scaleX(-1) translateX(0)\"\r\n\r\n\t\t\ti = 1\r\n\r\n\t\tif j > 11100\r\n\r\n\t\t\tcloudBack.style.webkitTransform = \"translateX(0)\"\r\n\r\n\t\t\tj = 1\r\n\r\n\r\n\t\t\t# cloud.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloudBack.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloud.style.opacity = 0\r\n\r\n\t\t\t# cloudBack.style.opacity = 0\r\n\r\n\t\t# labelI.value = i\r\n\r\n\t\t# labelJ.value = j\r\n\r\n\t\ti++\r\n\r\n\t\tj++\r\n\r\n\t\t# cloud.style.webkitTransition = \"16\"\r\n\r\n\t\trequestAnimationFrame moveClouds\r\n\r\n\r\n\tdocument.addEventListener \"click\", (e) ->\r\n\r\n\t\tclouds.style.webkitTransition = \"all 2s\"\r\n\r\n\t\tclouds.style.webkitTransform = \"translateX(20px)\"\r\n","define ['css'], (css) ->\r\n\r\n\twindow.requestAnimationFrame = do ->\r\n\r\n\t\tif typeof window.requestAnimationFrame isnt 'undefined' then return requestAnimationFrame\r\n\r\n\t\tif typeof window.webkitRequestAnimationFrame isnt 'undefined' then return webkitRequestAnimationFrame\r\n\r\n\t\tif typeof window.mozRequestAnimationFrame isnt 'undefined' then return mozRequestAnimationFrame\r\n\r\n\t\t(cb) -> setTimeout cb, 16.66\r\n\r\n\t# window.requestAnimationFrame = requestAnimationFrame || webkitRequestAnimationFrame || mozRequestAnimationFrame || (cb) ->\r\n\r\n\t# \tsetTimeout cb, 16\r\n\r\n\t# console.log setTimeout\r\n\r\n\tsky = document.querySelector '.sky'\r\n\r\n\tclouds = document.querySelector '.clouds'\r\n\r\n\tcloudBack = document.querySelector '.cloud-back'\r\n\r\n\tcloud = document.querySelector '.cloud'\r\n\r\n\tlogo = document.querySelector '.logo'\r\n\r\n\tlogo.style.opacity = 0\r\n\r\n\tlogo.style.webkitTransform = \"translateY(200px) rotateX(-80deg)\"\r\n\r\n\ti = 1\r\n\r\n\tj = 1\r\n\r\n\tsetTimeout =>\r\n\r\n\t\tlogo.style.webkitTransition = \"all 4s\"\r\n\r\n\t\tlogo.style.webkitTransform = \"translateY(1px) rotateX(1deg)\"\r\n\r\n\t\tlogo.style.opacity = 1\r\n\r\n\t, 20000\r\n\r\n\tlabelI = document.getElementById \"text-i\"\r\n\r\n\tlabelJ = document.getElementById \"text-j\"\r\n\r\n\r\n\tdo moveClouds = ->\r\n\r\n\t\t# if i < 900\r\n\r\n\t\t\t# cloud.style.left = parseInt(getComputedStyle(cloud).left) - 2 + 'px'\r\n\r\n\t\t\t# cloudBack.style.left = parseInt(getComputedStyle(cloudBack).left) - 1 + 'px'\r\n\r\n\t\tcss.setTransform cloud, \"scaleX(-1) translateX(#{i}px)\"\r\n\t\t# cloud.style.webkitTransform = \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\r\n\t\tcss.setTransform cloudBack, \"translateX(#{-j / 2}px)\"\r\n\t\t# css.setTransform cloudBack, \"translateX(#{-j}px)\"\r\n\r\n\t\t# cloudBack.style.webkitTransform = \"translateX(#{-j}px)\"\r\n\r\n\t\tif i > 6300\r\n\r\n\t\t\tcloud.style.webkitTransform = \"scaleX(-1) translateX(0)\"\r\n\r\n\t\t\ti = 1\r\n\r\n\t\tif j > 11100\r\n\r\n\t\t\tcloudBack.style.webkitTransform = \"translateX(0)\"\r\n\r\n\t\t\tj = 1\r\n\r\n\r\n\t\t\t# cloud.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloudBack.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloud.style.opacity = 0\r\n\r\n\t\t\t# cloudBack.style.opacity = 0\r\n\r\n\t\t# labelI.value = i\r\n\r\n\t\t# labelJ.value = j\r\n\r\n\t\ti++\r\n\r\n\t\tj++\r\n\r\n\t\t# cloud.style.webkitTransition = \"16\"\r\n\r\n\t\trequestAnimationFrame moveClouds\r\n\r\n\r\n\tdocument.addEventListener \"click\", (e) ->\r\n\r\n\t\tclouds.style.webkitTransition = \"all 2s\"\r\n\r\n\t\tclouds.style.webkitTransform = \"translateY(20px)\"\r\n","define ['css'], (css) ->\r\n\r\n\twindow.requestAnimationFrame = do ->\r\n\r\n\t\tif typeof window.requestAnimationFrame isnt 'undefined' then return requestAnimationFrame\r\n\r\n\t\tif typeof window.webkitRequestAnimationFrame isnt 'undefined' then return webkitRequestAnimationFrame\r\n\r\n\t\tif typeof window.mozRequestAnimationFrame isnt 'undefined' then return mozRequestAnimationFrame\r\n\r\n\t\t(cb) -> setTimeout cb, 16.66\r\n\r\n\t# window.requestAnimationFrame = requestAnimationFrame || webkitRequestAnimationFrame || mozRequestAnimationFrame || (cb) ->\r\n\r\n\t# \tsetTimeout cb, 16\r\n\r\n\t# console.log setTimeout\r\n\r\n\tsky = document.querySelector '.sky'\r\n\r\n\tclouds = document.querySelector '.clouds'\r\n\r\n\tcloudBack = document.querySelector '.cloud-back'\r\n\r\n\tcloud = document.querySelector '.cloud'\r\n\r\n\tlogo = document.querySelector '.logo'\r\n\r\n\tlogo.style.opacity = 0\r\n\r\n\tlogo.style.webkitTransform = \"translateY(200px) rotateX(-80deg)\"\r\n\r\n\ti = 1\r\n\r\n\tj = 1\r\n\r\n\tsetTimeout =>\r\n\r\n\t\tlogo.style.webkitTransition = \"all 4s\"\r\n\r\n\t\tlogo.style.webkitTransform = \"translateY(1px) rotateX(1deg)\"\r\n\r\n\t\tlogo.style.opacity = 1\r\n\r\n\t, 20000\r\n\r\n\tlabelI = document.getElementById \"text-i\"\r\n\r\n\tlabelJ = document.getElementById \"text-j\"\r\n\r\n\r\n\tdo moveClouds = ->\r\n\r\n\t\t# if i < 900\r\n\r\n\t\t\t# cloud.style.left = parseInt(getComputedStyle(cloud).left) - 2 + 'px'\r\n\r\n\t\t\t# cloudBack.style.left = parseInt(getComputedStyle(cloudBack).left) - 1 + 'px'\r\n\r\n\t\tcss.setTransform cloud, \"scaleX(-1) translateX(#{i}px)\"\r\n\t\t# cloud.style.webkitTransform = \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\r\n\t\tcss.setTransform cloudBack, \"translateX(#{-j / 2}px)\"\r\n\t\t# css.setTransform cloudBack, \"translateX(#{-j}px)\"\r\n\r\n\t\t# cloudBack.style.webkitTransform = \"translateX(#{-j}px)\"\r\n\r\n\t\tif i > 6300\r\n\r\n\t\t\tcloud.style.webkitTransform = \"scaleX(-1) translateX(0)\"\r\n\r\n\t\t\ti = 1\r\n\r\n\t\tif j > 11100\r\n\r\n\t\t\tcloudBack.style.webkitTransform = \"translateX(0)\"\r\n\r\n\t\t\tj = 1\r\n\r\n\r\n\t\t\t# cloud.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloudBack.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloud.style.opacity = 0\r\n\r\n\t\t\t# cloudBack.style.opacity = 0\r\n\r\n\t\t# labelI.value = i\r\n\r\n\t\t# labelJ.value = j\r\n\r\n\t\ti++\r\n\r\n\t\tj++\r\n\r\n\t\t# cloud.style.webkitTransition = \"16\"\r\n\r\n\t\trequestAnimationFrame moveClouds\r\n\r\n\r\n\tdocument.addEventListener \"click\", (e) ->\r\n\r\n\t\t# clouds.style.webkitTransition = \"all 2s\"\r\n\r\n\t\tclouds.style.webkitTransform = \"translateY(20px)\"\r\n","define ['css'], (css) ->\r\n\r\n\twindow.requestAnimationFrame = do ->\r\n\r\n\t\tif typeof window.requestAnimationFrame isnt 'undefined' then return requestAnimationFrame\r\n\r\n\t\tif typeof window.webkitRequestAnimationFrame isnt 'undefined' then return webkitRequestAnimationFrame\r\n\r\n\t\tif typeof window.mozRequestAnimationFrame isnt 'undefined' then return mozRequestAnimationFrame\r\n\r\n\t\t(cb) -> setTimeout cb, 16.66\r\n\r\n\t# window.requestAnimationFrame = requestAnimationFrame || webkitRequestAnimationFrame || mozRequestAnimationFrame || (cb) ->\r\n\r\n\t# \tsetTimeout cb, 16\r\n\r\n\t# console.log setTimeout\r\n\r\n\tsky = document.querySelector '.sky'\r\n\r\n\tclouds = document.querySelector '.clouds'\r\n\r\n\tcloudBack = document.querySelector '.cloud-back'\r\n\r\n\tcloud = document.querySelector '.cloud'\r\n\r\n\tlogo = document.querySelector '.logo'\r\n\r\n\tlogo.style.opacity = 0\r\n\r\n\tlogo.style.webkitTransform = \"translateY(200px) rotateX(-80deg)\"\r\n\r\n\ti = 1\r\n\r\n\tj = 1\r\n\r\n\tsetTimeout =>\r\n\r\n\t\tlogo.style.webkitTransition = \"all 4s\"\r\n\r\n\t\tlogo.style.webkitTransform = \"translateY(1px) rotateX(1deg)\"\r\n\r\n\t\tlogo.style.opacity = 1\r\n\r\n\t, 20000\r\n\r\n\tlabelI = document.getElementById \"text-i\"\r\n\r\n\tlabelJ = document.getElementById \"text-j\"\r\n\r\n\r\n\tdo moveClouds = ->\r\n\r\n\t\t# if i < 900\r\n\r\n\t\t\t# cloud.style.left = parseInt(getComputedStyle(cloud).left) - 2 + 'px'\r\n\r\n\t\t\t# cloudBack.style.left = parseInt(getComputedStyle(cloudBack).left) - 1 + 'px'\r\n\r\n\t\tcss.setTransform cloud, \"scaleX(-1) translateX(#{i}px)\"\r\n\t\t# cloud.style.webkitTransform = \"scaleX(-1) translateX(#{i * 2}px)\"\r\n\r\n\t\tcss.setTransform cloudBack, \"translateX(#{-j / 2}px)\"\r\n\t\t# css.setTransform cloudBack, \"translateX(#{-j}px)\"\r\n\r\n\t\t# cloudBack.style.webkitTransform = \"translateX(#{-j}px)\"\r\n\r\n\t\tif i > 6300\r\n\r\n\t\t\tcloud.style.webkitTransform = \"scaleX(-1) translateX(0)\"\r\n\r\n\t\t\ti = 1\r\n\r\n\t\tif j > 11100\r\n\r\n\t\t\tcloudBack.style.webkitTransform = \"translateX(0)\"\r\n\r\n\t\t\tj = 1\r\n\r\n\r\n\t\t\t# cloud.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloudBack.style.webkitTransition = \"all 4s\"\r\n\r\n\t\t\t# cloud.style.opacity = 0\r\n\r\n\t\t\t# cloudBack.style.opacity = 0\r\n\r\n\t\t# labelI.value = i\r\n\r\n\t\t# labelJ.value = j\r\n\r\n\t\ti++\r\n\r\n\t\tj++\r\n\r\n\t\t# cloud.style.webkitTransition = \"16\"\r\n\r\n\t\trequestAnimationFrame moveClouds\r\n\r\n\r\n\tdocument.addEventListener \"click\", (e) ->\r\n\r\n\t\tclouds.style.webkitTransition = \"all 2s\"\r\n\r\n\t\tclouds.style.webkitTransform = \"rotateX(-80deg) translateY(-100px)\"\r\n","MethodChain = require 'method-chain'\n\nmodule.exports = class Chain_\n\n\t_getMethodChain: ->\n\n\t\tunless @constructor.__methodChain?\n\n\t\t\t@constructor.__methodChain = new MethodChain\n\n\t\t\tfor key, fn of @\n\n\t\t\t\tcontinue if key[0] is '_' or key is 'constructor'\n\n\t\t\t\tcontinue unless fn instanceof Function\n\n\t\t\t\t@constructor.__methodChain.addMethod key\n\n\t\t@constructor.__methodChain\n\n\t_getNewInterface: ->\n\n\t\t@_getMethodChain().getInterface()\n\n\t_eventEnabledMethod: (args, runCallback) ->\n\n\t\tfn = args[0] ? null\n\n\t\tif fn\n\n\t\t\trunCallback =>\n\n\t\t\t\tfn.apply @, arguments\n\n\t\t\treturn @\n\n\t\telse\n\n\t\t\t_interface = @_getNewInterface()\n\n\t\t\trunCallback =>\n\n\t\t\t\t# TODO: lazyValues\n\t\t\t\t@_getMethodChain().run _interface, @\n\n\t\t\treturn _interface","css = require '../../../../utility/css'\nColorHolder = require '../tools/ColorHolder'\n\nmodule.exports = class Fill_\n\n\t__initMixinFill: ->\n\n\t\t@fill = new ColorHolder @_getFillUpdater()\n\n\t\t@_fill =\n\n\t\t\tbgColor: 'none'\n\n\t\t\tcolor: 'inherit'\n\n\t\t\tborder: 'none'\n\n\t\t\topacity: 1\n\n\t__clonerForFill: (newStyleSetter) ->\n\n\t\tnewStyleSetter.fill = @fill.clone newStyleSetter._getFillUpdater()\n\n\t\treturn\n\n\t_getFillUpdater: ->\n\n\t\t=>\n\n\t\t\tdo @_updateFill\n\n\t\t\treturn\n\n\t_updateFill: ->\n\n\t\t@_styles.backgroundColor = @_fill.bgColor = @fill._color.toCss()\n\n\t\t@\n\n\trotateFillHue: (amount) ->\n\n\t\t@_fill.bgColor.rotateHue amount\n\n\t\t@_styles.backgroundColor = @_fill.bgColor.toCss()\n\n\tsetTextColor: (r, g, b) ->\n\n\t\t@_styles.color = @_fill.color = css.rgb r, g, b\n\n\t\tnull\n\n\tmakeHollow: ->\n\n\t\t@_styles.bgColor = @_fill.bgColor = 'transparent'\n\n\ttexturize: (filename) ->\n\n\t\taddr = \"./images/#{filename}\"\n\n\t\t@_styles.background = 'url(' + addr + ')'\n\n\t\t@\n\n\tsetTexturePosition: (x, y) ->\n\n\t\t@_styles.backgroundPosition = \"#{x}px #{y}px\"\n\n\t\t@\n\n\tsetBorder: (thickness, r, g, b) ->\n\n\t\tunless thickness?\n\n\t\t\t@_styles.border = @_fill.border = 'none'\n\n\t\telse\n\n\t\t\t@_styles.border = @_fill.border = \"#{thickness}px solid #{css.rgb(r, g, b)}\"\n\n\t\t@\n\n\tremoveBorder: ->\n\n\t\t@_styles.border = @_fill.border = 'none'\n\n\t\t@\n\n\tsetOpacity: (d) ->\n\n\t\t@_styles.opacity = @_fill.opacity = d\n\n\t\t@\n\n\tadjustOpacity: (d) ->\n\n\t\t@_fill.opacity += d;\n\n\t\t@_styles.opacity = @_fill.opacity\n\n\t\t@","CSSFilter = require 'css-filter'\ncss = require '../../../../utility/css'\n\nmodule.exports = class Filters_\n\n\t__initMixinFilters: ->\n\n\t\t@_cssFilter = new CSSFilter\n\n\t\t@_shouldUpdateFilters = no\n\n\t__clonerForFilters: (newStyleSetter) ->\n\n\t\tnewStyleSetter._shouldUpdateFilters = no\n\n\t\treturn\n\n\t_updateFilters: ->\n\n\t\treturn unless @_shouldUpdateFilters\n\n\t\t@_shouldUpdateFilters = no\n\n\t\tdo @_actuallyUpdateFilters\n\n\t_scheduleFiltersUpdate: ->\n\n\t\t@_shouldUpdateFilters = yes\n\n\t\tdo @_scheduleUpdate\n\n\t_actuallyUpdateFilters: ->\n\n\t\tcss.setCssFilter @node, @_cssFilter.toCss()\n\n\t\t@\n\nClassPrototype = Filters_.prototype\n\nfor methodName, method of CSSFilter.prototype\n\n\tcontinue unless method instanceof Function\n\n\tcontinue if ClassPrototype[methodName]?\n\n\tcontinue if methodName[0] is '_'\n\n\tcontinue if methodName is 'toCss'\n\n\tdo ->\n\n\t\t_methodName = methodName\n\n\t\tif method.length is 0\n\n\t\t\tClassPrototype[_methodName] =  ->\n\n\t\t\t\t# This is more performant than method.apply()\n\t\t\t\t#\n\t\t\t\t# Argument splats won't work here though.\n\t\t\t\t@_cssFilter[_methodName]()\n\n\t\t\t\tdo @_scheduleFiltersUpdate\n\n\t\t\t\t@\n\n\t\telse if method.length is 1\n\n\t\t\tClassPrototype[_methodName] = (arg0) ->\n\n\t\t\t\t@_cssFilter[_methodName] arg0\n\n\t\t\t\tdo @_scheduleFiltersUpdate\n\n\t\t\t\t@\n\n\t\telse if method.length is 2\n\n\t\t\tClassPrototype[_methodName] = (arg0, arg1) ->\n\n\t\t\t\t@_cssFilter[_methodName] arg0, arg1\n\n\t\t\t\tdo @_scheduleFiltersUpdate\n\n\t\t\t\t@\n\n\t\telse if method.length is 3\n\n\t\t\tClassPrototype[_methodName] = (arg0, arg1, arg2) ->\n\n\t\t\t\t@_cssFilter[_methodName] arg0, arg1, arg2\n\n\t\t\t\tdo @_scheduleFiltersUpdate\n\n\t\t\t\t@\n\n\t\telse if method.length is 4\n\n\t\t\tClassPrototype[_methodName] = (arg0, arg1, arg2, arg3) ->\n\n\t\t\t\t@_cssFilter[_methodName] arg0, arg1, arg2, arg3\n\n\t\t\t\tdo @_scheduleFiltersUpdate\n\n\t\t\t\t@\n\n\t\telse if method.length is 5\n\n\t\t\tClassPrototype[_methodName] = (arg0, arg1, arg2, arg3, arg4) ->\n\n\t\t\t\t@_cssFilter[_methodName] arg0, arg1, arg2, arg3, arg4\n\n\t\t\t\tdo @_scheduleFiltersUpdate\n\n\t\t\t\t@\n\n\t\telse\n\n\t\t\tthrow Error \"Methods with more than 5 args are not supported.\"\n\nFilters_","css = require '../../../../utility/css'\n\nmodule.exports = class General_\n\n\tz: (i) ->\n\n\t\t@node.style.zIndex = i\n\n\t\t@\n\n\tcss: (prop, val) ->\n\n\t\t@_styles[prop] = val\n\n\t\t@\n\n\taddClass: (c) ->\n\n\t\t@node.classList.add c\n\n\t\t@\n\n\tremoveClass: (c) ->\n\n\t\t@node.classList.remove c\n\n\t\t@\n\n\ttoggleClass: (c) ->\n\n\t\t@node.classList.toggle c\n\n\t\t@\n\n\tsetClass: (c) ->\n\n\t\t@node.className = c\n\n\t\t@","module.exports = class Layout_\n\n\t__initMixinLayout: ->\n\n\t\t@_layout =\n\n\t\t\twidth: null\n\n\t\t\theight: null\n\n\t\t\tclipLeft: 'auto'\n\n\t\t\tclipRight: 'auto'\n\n\t\t\tclipTop: 'auto'\n\n\t\t\tclipBottom: 'auto'\n\n\tsetWidth: (w) ->\n\n\t\t@_layout.width = w\n\n\t\t@_styles.width = w + 'px'\n\n\t\t@\n\n\tsetHeight: (h) ->\n\n\t\t@_layout.height = h\n\n\t\t@_styles.height = h + 'px'\n\n\t\t@\n\n\tclip: (top, right, bottom, left) ->\n\n\t\t@_layout.clipTop = top\n\t\t@_layout.clipRight = right\n\t\t@_layout.clipBottom = bottom\n\t\t@_layout.clipLeft = left\n\n\t\tif typeof top is 'number' then top += 'px'\n\t\tif typeof right is 'number' then right += 'px'\n\t\tif typeof bottom is 'number' then bottom += 'px'\n\t\tif typeof left is 'number' then left += 'px'\n\n\t\t@_styles.clip = \"rect(#{top}, #{right}, #{bottom}, #{left})\"\n\n\t\t@\n\n\tunclip: ->\n\n\t\t@clip 'auto', 'auto', 'auto', 'auto'\n\n\t\t@\n\n\tclipTop: (a) ->\n\n\t\t@clip a, @_layout.clipRight, @_layout.clipBottom, @_layout.clipLeft\n\n\tclipRight: (a) ->\n\n\t\t@clip @_layout.clipTop, a, @_layout.clipBottom, @_layout.clipLeft\n\n\tclipBottom: (a) ->\n\n\t\t@clip @_layout.clipTop, @_layout.clipRight, a, @_layout.clipLeft\n\n\tclipLeft: (a) ->\n\n\t\t@clip @_layout.clipTop, @_layout.clipRight, @_layout.clipBottom, a","Transformation = require 'transformation'\ncss = require '../../../../utility/css'\n\nmodule.exports = class Transforms_\n\n\t__initMixinTransforms: ->\n\n\t\t@_transformer = new Transformation\n\n\t\t@_origin =\n\n\t\t\tx: null\n\n\t\t\ty: null\n\n\t\t\tz: null\n\n\t\t@_shouldUpdateTransforms = no\n\n\t\treturn\n\n\t__clonerForTransforms: (newStyleSetter) ->\n\n\t\tnewStyleSetter._shouldUpdateTransforms = no\n\n\t\treturn\n\n\t_updateTransforms: ->\n\n\t\treturn unless @_shouldUpdateTransforms\n\n\t\t@_shouldUpdateTransforms = no\n\n\t\tdo @_actuallyUpdateTransforms\n\n\t_scheduleTransformsUpdate: ->\n\n\t\t@_shouldUpdateTransforms = yes\n\n\t\tdo @_scheduleUpdate\n\n\t_actuallyUpdateTransforms: ->\n\n\t\tcss.setTransform @node, @_transformer.toPlainCss()\n\n\t\t@\n\n\tgo3d: ->\n\n\t\tcss.setTransformStyle @node, 'preserve-3d'\n\n\t\t@\n\n\tgoFlat: ->\n\n\t\tcss.setTransformStyle @node, 'flat'\n\n\t\t@\n\n\tsetOrigin: (x = 0, y = 0, z = 0) ->\n\n\t\t@_origin.x = x\n\t\t@_origin.y = y\n\t\t@_origin.z = z\n\n\t\tcss.setTransformOrigin @node,\n\n\t\t\t\"#{@_origin.x}px #{@_origin.y}px #{@_origin.z}px\"\n\n\t\t@\n\n\toriginToBottom: ->\n\n\t\tcss.setTransformOrigin @node,\n\n\t\t\t\"50% 100%\"\n\n\t\t@\n\n\toriginToTop: ->\n\n\t\tcss.setTransformOrigin @node,\n\n\t\t\t\"50% 0\"\n\n\t\t@\n\n\tpivot: (x = 0, y = 0) ->\n\n\t\tif x is -1\n\n\t\t\t_x = '0%'\n\n\t\telse if x is 0\n\n\t\t\t_x = '50%'\n\n\t\telse if x is 1\n\n\n\t\t\t_x = '100%'\n\n\t\telse\n\n\t\t\tthrow Error \"pivot() only takes -1, 0, and 1 for its arguments\"\n\n\t\tif y is -1\n\n\t\t\t_y = '0%'\n\n\t\telse if y is 0\n\n\t\t\t_y = '50%'\n\n\t\telse if y is 1\n\n\n\t\t\t_y = '100%'\n\n\t\telse\n\n\t\t\tthrow Error \"pivot() only takes -1, 0, and 1 for its arguments\"\n\n\t\tcss.setTransformOrigin @node,\n\n\t\t\t\"#{_x} #{_y}\"\n\n\t\t@\n\nClassPrototype = Transforms_.prototype\n\nfor methodName, method of Transformation.prototype\n\n\tcontinue unless method instanceof Function\n\n\tcontinue if ClassPrototype[methodName]?\n\n\tcontinue if methodName[0] is '_'\n\n\tcontinue if methodName is 'temporarily' or methodName is 'commit' or\n\t\tmethodName is 'rollBack' or methodName is 'toCss' or\n\t\tmethodName is 'toPlainCss' or methodName is 'toArray' or\n\t\tmethodName is 'toMatrix'\n\n\tdo ->\n\n\t\t_methodName = methodName\n\n\t\tif method.length is 0\n\n\t\t\tClassPrototype[_methodName] =  ->\n\n\t\t\t\t# This is more performant than method.apply()\n\t\t\t\t#\n\t\t\t\t# Argument splats won't work here though.\n\t\t\t\t@_transformer[_methodName]()\n\n\t\t\t\tdo @_scheduleTransformsUpdate\n\n\t\t\t\t@\n\n\t\telse if method.length is 1\n\n\t\t\tClassPrototype[_methodName] = (arg0) ->\n\n\t\t\t\t@_transformer[_methodName] arg0\n\n\t\t\t\tdo @_scheduleTransformsUpdate\n\n\t\t\t\t@\n\n\t\telse if method.length is 2\n\n\t\t\tClassPrototype[_methodName] = (arg0, arg1) ->\n\n\t\t\t\t@_transformer[_methodName] arg0, arg1\n\n\t\t\t\tdo @_scheduleTransformsUpdate\n\n\t\t\t\t@\n\n\t\telse if method.length is 3\n\n\t\t\tClassPrototype[_methodName] = (arg0, arg1, arg2) ->\n\n\t\t\t\t@_transformer[_methodName] arg0, arg1, arg2\n\n\t\t\t\tdo @_scheduleTransformsUpdate\n\n\t\t\t\t@\n\n\t\telse if method.length is 4\n\n\t\t\tClassPrototype[_methodName] = (arg0, arg1, arg2, arg3) ->\n\n\t\t\t\t@_transformer[_methodName] arg0, arg1, arg2, arg3\n\n\t\t\t\tdo @_scheduleTransformsUpdate\n\n\t\t\t\t@\n\n\t\telse if method.length is 5\n\n\t\t\tClassPrototype[_methodName] = (arg0, arg1, arg2, arg3, arg4) ->\n\n\t\t\t\t@_transformer[_methodName] arg0, arg1, arg2, arg3, arg4\n\n\t\t\t\tdo @_scheduleTransformsUpdate\n\n\t\t\t\t@\n\n\t\telse\n\n\t\t\tthrow Error \"Methods with more than 5 args are not supported.\"\n\nTransforms_","css = require '../../../../utility/css'\n\nmodule.exports = class Typography_\n\n\t__initMixinTypography: ->\n\n\t\t@_type =\n\n\t\t\tface: Typography_.defaultFace\n\n\t\t\tsize: Typography_.defaultSize\n\n\t\t\tcolor: Typography_.defaultColor\n\n\t\t@_sizeSet = no\n\n\t\treturn\n\n\t_getSize: ->\n\n\t\tunless @_sizeSet\n\n\t\t\t@_type.size = parseFloat(getComputedStyle(@node).fontSize)\n\n\t\t\t@_sizeSet = yes\n\n\t\t@_type.size\n\n\t_initTypography: ->\n\n\t\tdo @setSize\n\t\tdo @setFace\n\t\tdo @setColor\n\n\tsetFace: (face) ->\n\n\t\tunless face\n\n\t\t\t@_type.face = Typography_.defaultFace\n\n\t\telse\n\n\t\t\t@_type.face = face\n\n\t\tdo @_applyFace\n\n\t\t@\n\n\t_applyFace: ->\n\n\t\t@_styles.fontFamily = @_type.face\n\n\t\t@\n\n\tsetSize: (size) ->\n\n\t\tunless size\n\n\t\t\t@_type.size = Typography_.defaultSize\n\n\t\telse\n\n\t\t\t@_type.size = size\n\n\t\tdo @_applySize\n\n\t\t@\n\n\t_applySize: ->\n\n\t\t@_styles.fontSize = @_type.size + 'px'\n\n\t\t@\n\n\tsetColor: (r, g, b) ->\n\n\t\tif arguments.length is 0\n\n\t\t\t@_type.color = Typography_.defaultColor\n\n\t\telse\n\n\t\t\t@_type.color = css.rgb(r, g, b)\n\n\t\tdo @_applyColor\n\n\t\t@\n\n\t_applyColor: ->\n\n\t\t@_styles.color = @_type.color\n\n\t\tdo @_applyStroke\n\n\t\t@\n\n\t_applyStroke: ->\n\n\t\tif Typography_.needsTextStroke() and @_getSize() < 50\n\n\n\n\t\t\t@_styles.webkitTextStroke = '1.5 ' + @_type.color\n\n\t\t@\n\n\t@defaultFace = '\"HelveticaNeueLT Std Thin\"'\n\n\t@setDefaultFace: (face = \"HelveticaNeueLT Std Thin\") ->\n\n\t\t@defaultFace = face\n\n\t@defaultSize = 36\n\n\t@setDefaultSize: (size = 36) ->\n\n\t\t@defaultSize = size\n\n\t@defaultColor = css.rgb(255, 255, 255)\n\n\t@setDefaultColor: (r, g, b) ->\n\n\t\tif arguments.length is 0\n\n\t\t\t@defaultColor = css.rgb(255, 255, 255)\n\n\t\t@defaultColor = css.rgb(r, g, b)\n\n\t# As long as chrome hasn't implemented DirectWrite, text won't look\n\t# its best on windows. This function will tell you if you need to\n\t# apply a -webkit-text-stroke to make text look a bit smoother on\n\t# chrome/win.\n\t@needsTextStroke: do ->\n\n\t\t_needsTextStroke = null\n\n\t\t->\n\n\t\t\tif _needsTextStroke is null\n\n\t\t\t\tif navigator.appVersion.indexOf('Chrome') isnt -1 and navigator.appVersion.indexOf('Windows') isnt -1\n\n\t\t\t\t\t_needsTextStroke = yes\n\n\t\t\t\telse\n\n\t\t\t\t\t_needsTextStroke = no\n\n\t\t\t_needsTextStroke","Generals_ = require './mixin/Generals_'\nLayout_ = require './mixin/Layout_'\nFill_ = require './mixin/Fill_'\nTypography_ = require './mixin/Typography_'\nTransforms_ = require './mixin/Transforms_'\nFilters_ = require './mixin/Filters_'\n{classic, object} = require 'utila'\n\nmodule.exports = classic.mix Generals_, Layout_, Fill_, Typography_, Transforms_, Filters_, class StyleSetter\n\n\tconstructor: (@el) ->\n\n\t\t@node = @el.node\n\n\t\t@_styles = @node.style\n\n\t\tStyleSetter.__initMixinsFor @\n\n\t_scheduleUpdate: ->\n\n\t\tdo @el._scheduleUpdate\n\n\tclone: (el) ->\n\n\t\tnewObj = Object.create @constructor::\n\n\t\tnewObj.el = el\n\t\tnewObj.node = el.node\n\t\tnewObj._styles = el.node.style\n\n\t\tStyleSetter.__applyClonersFor @, [newObj]\n\n\t\tfor key of @\n\n\t\t\tcontinue if newObj[key] isnt undefined\n\n\t\t\tif @hasOwnProperty key\n\n\t\t\t\tnewObj[key] = object.clone @[key], yes\n\n\t\tnewObj","CSSColor = require 'css-color'\n\nmodule.exports = class ColorHolder\n\n\tconstructor: (@_callback) ->\n\n\t\t@_color = new CSSColor\n\n\twithRgb: (r, g, b) ->\n\n\t\t@_color.fromRgb r, g, b\n\n\t\tdo @_callback\n\n\t\t@\n\n\twithHsl: (h, s, l) ->\n\n\t\t@_color.fromHsl h, s, l\n\n\t\tdo @_callback\n\n\t\t@\n\n\tclone: (callback) ->\n\n\t\tnewObj = Object.create @constructor::\n\n\t\tnewObj._color = @_color.clone()\n\n\t\tnewObj._callback = callback\n\n\t\tnewObj\n\nClassPrototype = ColorHolder.prototype\n\nfor methodName, method of CSSColor.prototype\n\n\tcontinue unless method instanceof Function\n\n\tcontinue if ClassPrototype[methodName]?\n\n\tcontinue if methodName[0] is '_'\n\n\tcontinue if methodName.substr(0, 2) is 'to'\n\n\tdo ->\n\n\t\t_methodName = methodName\n\n\t\tif method.length is 0\n\n\t\t\tClassPrototype[_methodName] =  ->\n\n\t\t\t\t# This is more performant than method.apply()\n\t\t\t\t#\n\t\t\t\t# Argument splats won't work here though.\n\t\t\t\t@_color[_methodName]()\n\n\t\t\t\tdo @_callback\n\n\t\t\t\t@\n\n\t\telse if method.length is 1\n\n\t\t\tClassPrototype[_methodName] = (arg0) ->\n\n\t\t\t\t@_color[_methodName] arg0\n\n\t\t\t\tdo @_callback\n\n\t\t\t\t@\n\n\t\telse if method.length is 2\n\n\t\t\tClassPrototype[_methodName] = (arg0, arg1) ->\n\n\t\t\t\t@_color[_methodName] arg0, arg1\n\n\t\t\t\tdo @_callback\n\n\t\t\t\t@\n\n\t\telse if method.length is 3\n\n\t\t\tClassPrototype[_methodName] = (arg0, arg1, arg2) ->\n\n\t\t\t\t@_color[_methodName] arg0, arg1, arg2\n\n\t\t\t\tdo @_callback\n\n\t\t\t\t@\n\n\t\telse if method.length is 4\n\n\t\t\tClassPrototype[_methodName] = (arg0, arg1, arg2, arg3) ->\n\n\t\t\t\t@_color[_methodName] arg0, arg1, arg2, arg3\n\n\t\t\t\tdo @_callback\n\n\t\t\t\t@\n\n\t\telse if method.length is 5\n\n\t\t\tClassPrototype[_methodName] = (arg0, arg1, arg2, arg3, arg4) ->\n\n\t\t\t\t@_color[_methodName] arg0, arg1, arg2, arg3, arg4\n\n\t\t\t\tdo @_callback\n\n\t\t\t\t@\n\n\t\telse\n\n\t\t\tthrow Error \"Methods with more than 5 args are not supported.\"\n\nColorHolder","StyleSetter = require './styleSetter/StyleSetter'\r\nTransitioner = require './transitioner/Transitioner'\r\ntiming = require '../../timing'\r\n\r\nmodule.exports = class Styles\r\n\r\n\t__initMixinHasStyles: ->\r\n\r\n\t\t@_styleSetter = new StyleSetter @\r\n\r\n\t\t@_transitioner = new Transitioner @\r\n\r\n\t\t@fill = @_styleSetter.fill\r\n\r\n\t\t@_styleInterface = @_styleSetter\r\n\r\n\t\t@_updaterDeployed = no\r\n\r\n\t\t@_shouldUpdate = no\r\n\r\n\t\t@_updaterCallback = @_getNewUpdaterCallback()\r\n\r\n\t\t@_lastTimeUpdated = 0\r\n\r\n\t\treturn\r\n\r\n\t_getNewUpdaterCallback: ->\r\n\r\n\t\t(t) => @_doUpdate t\r\n\r\n\t_scheduleUpdate: ->\r\n\r\n\t\t@_shouldUpdate = yes\r\n\r\n\t\tdo @_deployUpdater\r\n\r\n\t\treturn\r\n\r\n\t_deployUpdater: ->\r\n\r\n\t\treturn if @_updaterDeployed\r\n\r\n\t\t@_updaterDeployed = yes\r\n\r\n\t\ttiming.afterEachFrame @_updaterCallback\r\n\r\n\t_undeployUpdater: ->\r\n\r\n\t\treturn unless @_updaterDeployed\r\n\r\n\t\t@_updaterDeployed = no\r\n\r\n\t\ttiming.cancelAfterEachFrame @_updaterCallback\r\n\r\n\t_doUpdate: (t) ->\r\n\r\n\t\tunless @_shouldUpdate\r\n\r\n\t\t\tif t - @_lastTimeUpdated > 100\r\n\r\n\t\t\t\tdo @_undeployUpdater\r\n\r\n\t\t\treturn\r\n\r\n\t\t@_lastTimeUpdated = t\r\n\r\n\t\t@_shouldUpdate = no\r\n\r\n\t\tdo @_transitioner._updateTransition\r\n\r\n\t\tdo @_styleSetter._updateTransforms\r\n\r\n\t\tdo @_styleSetter._updateFilters\r\n\r\n\t\treturn\r\n\r\n\t__clonerForHasStyles: (newEl) ->\r\n\r\n\t\tnewEl._styleSetter = @_styleSetter.clone newEl\r\n\t\tnewEl.fill = newEl._styleSetter.fill\r\n\t\tnewEl._transitioner = @_transitioner.clone newEl\r\n\r\n\t\tnewEl._updaterDeployed = no\r\n\r\n\t\tnewEl._shouldUpdate = no\r\n\r\n\t\tnewEl._updaterCallback = newEl._getNewUpdaterCallback()\r\n\r\n\t\tnewEl._lastTimeUpdated\r\n\r\n\t\tif @_styleInterface is @_styleSetter\r\n\r\n\t\t\tnewEl._styleInterface = newEl._styleSetter\r\n\r\n\t\telse\r\n\r\n\t\t\tnewEl._styleInterface = newEl._transitioner\r\n\r\n\t\treturn\r\n\r\n\t__quitterForHasStyles: ->\r\n\r\n\t\tdo @_undeployUpdater\r\n\r\n\tenableTransition: (duration) ->\r\n\r\n\t\t# console.log 'enable'\r\n\r\n\t\t@_styleInterface = @_transitioner\r\n\r\n\t\t@_transitioner.enable duration\r\n\r\n\t\t@\r\n\r\n\tdisableTransition: ->\r\n\r\n\t\t@_styleInterface = @_styleSetter\r\n\r\n\t\tdo @_transitioner.disable\r\n\r\n\t\t@\r\n\r\n\ttrans: (duration) -> @enableTransition duration\r\n\r\n\tnoTrans: -> do @disableTransition\r\n\r\n\tease: (funcNameOrFirstNumOfCubicBezier, secondNum, thirdNum, fourthNum) ->\r\n\r\n\t\t@_transitioner.ease funcNameOrFirstNumOfCubicBezier, secondNum, thirdNum, fourthNum\r\n\r\n\t\t@\r\n\r\nClassPrototype = Styles.prototype\r\n\r\nfor methodName, method of Transitioner.prototype\r\n\r\n\tcontinue unless method instanceof Function\r\n\r\n\tcontinue if ClassPrototype[methodName]?\r\n\r\n\tcontinue if methodName[0] is '_'\r\n\r\n\tcontinue if methodName.substr(0, 3) is 'get'\r\n\r\n\tdo ->\r\n\r\n\t\t_methodName = methodName\r\n\r\n\t\tif method.length is 0\r\n\r\n\t\t\tClassPrototype[_methodName] = ->\r\n\r\n\t\t\t\t# This is more performant than method.apply()\r\n\t\t\t\t#\r\n\t\t\t\t# Argument splats won't work here though.\r\n\t\t\t\t@_styleInterface[_methodName]()\r\n\r\n\t\t\t\t@\r\n\r\n\t\telse if method.length is 1\r\n\r\n\t\t\tClassPrototype[_methodName] = (arg0) ->\r\n\r\n\t\t\t\t@_styleInterface[_methodName] arg0\r\n\r\n\t\t\t\t@\r\n\r\n\t\telse if method.length is 2\r\n\r\n\t\t\tClassPrototype[_methodName] = (arg0, arg1) ->\r\n\r\n\t\t\t\t@_styleInterface[_methodName] arg0, arg1\r\n\r\n\t\t\t\t@\r\n\r\n\t\telse if method.length is 3\r\n\r\n\t\t\tClassPrototype[_methodName] = (arg0, arg1, arg2) ->\r\n\r\n\t\t\t\t@_styleInterface[_methodName] arg0, arg1, arg2\r\n\r\n\t\t\t\t@\r\n\r\n\t\telse if method.length is 4\r\n\r\n\t\t\tClassPrototype[_methodName] = (arg0, arg1, arg2, arg3) ->\r\n\r\n\t\t\t\t@_styleInterface[_methodName] arg0, arg1, arg2, arg3\r\n\r\n\t\t\t\t@\r\n\r\n\t\telse if method.length is 5\r\n\r\n\t\t\tClassPrototype[_methodName] = (arg0, arg1, arg2, arg3, arg4) ->\r\n\r\n\t\t\t\t@_styleInterface[_methodName] arg0, arg1, arg2, arg3, arg4\r\n\r\n\t\t\t\t@\r\n\r\n\t\telse\r\n\r\n\t\t\tthrow Error \"Methods with more than 5 args are not supported.\"\r\n\r\nfor methodName, method of StyleSetter.prototype\r\n\r\n\tcontinue unless method instanceof Function\r\n\r\n\tcontinue if ClassPrototype[methodName]?\r\n\r\n\tcontinue if methodName[0] is '_'\r\n\r\n\tcontinue if methodName.substr(0, 3) is 'get'\r\n\r\n\tdo ->\r\n\r\n\t\t_methodName = methodName\r\n\r\n\t\tif method.length is 0\r\n\r\n\t\t\tClassPrototype[_methodName] = ->\r\n\r\n\t\t\t\t# This is more performant than method.apply()\r\n\t\t\t\t#\r\n\t\t\t\t# Argument splats won't work here though.\r\n\t\t\t\t@_styleSetter[_methodName]()\r\n\r\n\t\t\t\t@\r\n\r\n\t\telse if method.length is 1\r\n\r\n\t\t\tClassPrototype[_methodName] = (arg0) ->\r\n\r\n\t\t\t\t@_styleSetter[_methodName] arg0\r\n\r\n\t\t\t\t@\r\n\r\n\t\telse if method.length is 2\r\n\r\n\t\t\tClassPrototype[_methodName] = (arg0, arg1) ->\r\n\r\n\t\t\t\t@_styleSetter[_methodName] arg0, arg1\r\n\r\n\t\t\t\t@\r\n\r\n\t\telse if method.length is 3\r\n\r\n\t\t\tClassPrototype[_methodName] = (arg0, arg1, arg2) ->\r\n\r\n\t\t\t\t@_styleSetter[_methodName] arg0, arg1, arg2\r\n\r\n\t\t\t\t@\r\n\r\n\t\telse if method.length is 4\r\n\r\n\t\t\tClassPrototype[_methodName] = (arg0, arg1, arg2, arg3) ->\r\n\r\n\t\t\t\t@_styleSetter[_methodName] arg0, arg1, arg2, arg3\r\n\r\n\t\t\t\t@\r\n\r\n\t\telse if method.length is 5\r\n\r\n\t\t\tClassPrototype[_methodName] = (arg0, arg1, arg2, arg3, arg4) ->\r\n\r\n\t\t\t\t@_styleSetter[_methodName] arg0, arg1, arg2, arg3, arg4\r\n\r\n\t\t\t\t@\r\n\r\n\t\telse\r\n\r\n\t\t\tthrow Error \"Methods with more than 5 args are not supported.\"\r\n\r\n# let's just expose these temporarily, till we do the rewrite\r\nStyles::getMovement = ->\r\n\r\n\t@_styleSetter._transformer.movement()\r\n\r\nStyles::getRotation = ->\r\n\r\n\t@_styleSetter._transformer.rotation()\r\n\r\nStyles::getScale = ->\r\n\r\n\t@_styleSetter._transformer.getScale()","{array} = require 'utila'\r\ntiming = require '../../timing'\r\n\r\nmodule.exports = class Timing_\r\n\r\n\t__initMixinTiming: ->\r\n\r\n\t\t@_quittersForTiming = []\r\n\r\n\t\tnull\r\n\r\n\t__clonerForTiming: (newEl) ->\r\n\r\n\t\tnewEl._quittersForTiming = []\r\n\r\n\t__quitterForTiming: ->\r\n\r\n\t\tloop\r\n\r\n\t\t\treturn if @_quittersForTiming.length < 1\r\n\r\n\t\t\t@_quittersForTiming.pop()()\r\n\r\n\t\treturn\r\n\r\n\twait: (ms, rest...) ->\r\n\r\n\t\t@_eventEnabledMethod rest, (cb) =>\r\n\r\n\t\t\ttiming.wait ms, =>\r\n\r\n\t\t\t\tcb.call @\r\n\r\n\timmediately: ->\r\n\r\n\t\t@_eventEnabledMethod arguments, (cb) =>\r\n\r\n\t\t\ttiming.nextTick =>\r\n\r\n\t\t\t\tcb.call @\r\n\r\n\teachFrame: ->\r\n\r\n\t\t@_eventEnabledMethod arguments, (cb) =>\r\n\r\n\t\t\tstartTime = new Int32Array 1\r\n\t\t\tstartTime[0] = -1\r\n\r\n\t\t\tcanceled = no\r\n\r\n\t\t\tcanceler = =>\r\n\r\n\t\t\t\treturn if canceled\r\n\r\n\t\t\t\ttiming.cancelOnEachFrame theCallback\r\n\r\n\t\t\t\tarray.pluckOneItem @_quittersForTiming, canceler\r\n\r\n\t\t\t\tcanceled = yes\r\n\r\n\t\t\t@_quittersForTiming.push canceler\r\n\r\n\t\t\ttheCallback = (t) =>\r\n\r\n\t\t\t\tif startTime[0] < 0\r\n\r\n\t\t\t\t\tstartTime[0] = t\r\n\r\n\t\t\t\t\telapsedTime = 0\r\n\r\n\t\t\t\telse\r\n\r\n\t\t\t\t\telapsedTime = t - startTime[0]\r\n\r\n\t\t\t\tcb.call @, elapsedTime, canceler\r\n\r\n\t\t\t\tnull\r\n\r\n\t\t\ttiming.onEachFrame theCallback\r\n\r\n\trun: ->\r\n\r\n\t\t@_eventEnabledMethod arguments, (cb) =>\r\n\r\n\t\t\tcb.call @\r\n\r\n\t\t@\r\n\r\n\tevery: (ms, args...) ->\r\n\r\n\t\t@_eventEnabledMethod args, (cb) =>\r\n\r\n\t\t\tcanceled = no\r\n\r\n\t\t\tcanceler = =>\r\n\r\n\t\t\t\treturn if canceled\r\n\r\n\t\t\t\ttiming.cancelEvery theCallback\r\n\r\n\t\t\t\tarray.pluckOneItem @_quittersForTiming, canceler\r\n\r\n\t\t\t\tcanceled = yes\r\n\r\n\t\t\t@_quittersForTiming.push canceler\r\n\r\n\t\t\ttheCallback = =>\r\n\r\n\t\t\t\tcb.call @, canceler\r\n\r\n\t\t\ttiming.every ms, theCallback\r\n\r\n\teveryAndNow: (ms, args...) ->\r\n\r\n\t\t@_eventEnabledMethod args, (cb) =>\r\n\r\n\t\t\tcanceled = no\r\n\r\n\t\t\tcanceler = =>\r\n\r\n\t\t\t\treturn if canceled\r\n\r\n\t\t\t\ttiming.cancelEvery theCallback\r\n\r\n\t\t\t\tarray.pluckOneItem @_quittersForTiming, canceler\r\n\r\n\t\t\t\tcanceled = yes\r\n\r\n\t\t\t@_quittersForTiming.push canceler\r\n\r\n\t\t\ttheCallback = =>\r\n\r\n\t\t\t\tcb.call @, canceler\r\n\r\n\t\t\ttiming.every ms, theCallback\r\n\r\n\t\t\ttiming.afterNextFrame theCallback","module.exports = class Fill_\n\n\t__initMixinFill: ->\n\n\t\t@_fromFill =\n\n\t\t\topacity: null\n\n\t\t@_toFill =\n\n\t\t\topacity: null\n\n\t\t@_currentFill = @el._styleSetter._fill\n\n\t\treturn\n\n\t__clonerForFill: (newTransitioner) ->\n\n\t\tnewTransitioner._currentFill = newTransitioner.el._styleSetter._fill\n\n\t\treturn\n\n\t_adjustFromValuesForFill: ->\n\n\t\t@_fromFill.opacity = @_currentFill.opacity\n\n\t\treturn\n\n\t_disableTransitionForFill: ->\n\n\t\t@_toFill.opacity = @_currentFill.opacity\n\n\t\t@_needsUpdate.opacity = no\n\n\t\treturn\n\n\t_updateTransitionForFill: (progress) ->\n\n\t\tif @_needsUpdate.opacity\n\n\t\t\t@_updateOpacity progress\n\n\t\treturn\n\n\tsetOpacity: (d) ->\n\n\t\t@_toFill.opacity = d\n\n\t\t@_needsUpdate.opacity = yes\n\n\t\tdo @_update\n\n\t\t@\n\n\tadjustOpacity: (d) ->\n\n\t\t@_toFill.opacity = @_currentFill.opacity + d\n\n\t\t@_needsUpdate.opacity = yes\n\n\t\tdo @_update\n\n\t\t@\n\n\t_updateOpacity: (progress) ->\n\n\t\t@_styleSetter.setOpacity (\n\n\t\t\t@_fromFill.opacity +\n\n\t\t\t(@_toFill.opacity - @_fromFill.opacity) * progress\n\n\t\t)\n\n\t\treturn"]}