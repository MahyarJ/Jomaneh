var ClassPrototype, Transformation, Transforms_, css, method, methodName, _fn, _ref;

Transformation = require('transformation');

css = require('../../../../utility/css');

module.exports = Transforms_ = (function() {
  function Transforms_() {}

  Transforms_.prototype.__initMixinTransforms = function() {
    this._transformer = new Transformation;
    this._origin = {
      x: null,
      y: null,
      z: null
    };
    this._shouldUpdateTransforms = false;
  };

  Transforms_.prototype.__clonerForTransforms = function(newStyleSetter) {
    newStyleSetter._shouldUpdateTransforms = false;
  };

  Transforms_.prototype._updateTransforms = function() {
    if (!this._shouldUpdateTransforms) {
      return;
    }
    this._shouldUpdateTransforms = false;
    return this._actuallyUpdateTransforms();
  };

  Transforms_.prototype._scheduleTransformsUpdate = function() {
    this._shouldUpdateTransforms = true;
    return this._scheduleUpdate();
  };

  Transforms_.prototype._actuallyUpdateTransforms = function() {
    css.setTransform(this.node, this._transformer.toPlainCss());
    return this;
  };

  Transforms_.prototype.go3d = function() {
    css.setTransformStyle(this.node, 'preserve-3d');
    return this;
  };

  Transforms_.prototype.goFlat = function() {
    css.setTransformStyle(this.node, 'flat');
    return this;
  };

  Transforms_.prototype.setOrigin = function(x, y, z) {
    if (x == null) {
      x = 0;
    }
    if (y == null) {
      y = 0;
    }
    if (z == null) {
      z = 0;
    }
    this._origin.x = x;
    this._origin.y = y;
    this._origin.z = z;
    css.setTransformOrigin(this.node, "" + this._origin.x + "px " + this._origin.y + "px " + this._origin.z + "px");
    return this;
  };

  Transforms_.prototype.originToBottom = function() {
    css.setTransformOrigin(this.node, "50% 100%");
    return this;
  };

  Transforms_.prototype.originToTop = function() {
    css.setTransformOrigin(this.node, "50% 0");
    return this;
  };

  Transforms_.prototype.pivot = function(x, y) {
    var _x, _y;
    if (x == null) {
      x = 0;
    }
    if (y == null) {
      y = 0;
    }
    if (x === -1) {
      _x = '0%';
    } else if (x === 0) {
      _x = '50%';
    } else if (x === 1) {
      _x = '100%';
    } else {
      throw Error("pivot() only takes -1, 0, and 1 for its arguments");
    }
    if (y === -1) {
      _y = '0%';
    } else if (y === 0) {
      _y = '50%';
    } else if (y === 1) {
      _y = '100%';
    } else {
      throw Error("pivot() only takes -1, 0, and 1 for its arguments");
    }
    css.setTransformOrigin(this.node, "" + _x + " " + _y);
    return this;
  };

  return Transforms_;

})();

ClassPrototype = Transforms_.prototype;

_ref = Transformation.prototype;
_fn = function() {
  var _methodName;
  _methodName = methodName;
  if (method.length === 0) {
    return ClassPrototype[_methodName] = function() {
      this._transformer[_methodName]();
      this._scheduleTransformsUpdate();
      return this;
    };
  } else if (method.length === 1) {
    return ClassPrototype[_methodName] = function(arg0) {
      this._transformer[_methodName](arg0);
      this._scheduleTransformsUpdate();
      return this;
    };
  } else if (method.length === 2) {
    return ClassPrototype[_methodName] = function(arg0, arg1) {
      this._transformer[_methodName](arg0, arg1);
      this._scheduleTransformsUpdate();
      return this;
    };
  } else if (method.length === 3) {
    return ClassPrototype[_methodName] = function(arg0, arg1, arg2) {
      this._transformer[_methodName](arg0, arg1, arg2);
      this._scheduleTransformsUpdate();
      return this;
    };
  } else if (method.length === 4) {
    return ClassPrototype[_methodName] = function(arg0, arg1, arg2, arg3) {
      this._transformer[_methodName](arg0, arg1, arg2, arg3);
      this._scheduleTransformsUpdate();
      return this;
    };
  } else if (method.length === 5) {
    return ClassPrototype[_methodName] = function(arg0, arg1, arg2, arg3, arg4) {
      this._transformer[_methodName](arg0, arg1, arg2, arg3, arg4);
      this._scheduleTransformsUpdate();
      return this;
    };
  } else {
    throw Error("Methods with more than 5 args are not supported.");
  }
};
for (methodName in _ref) {
  method = _ref[methodName];
  if (!(method instanceof Function)) {
    continue;
  }
  if (ClassPrototype[methodName] != null) {
    continue;
  }
  if (methodName[0] === '_') {
    continue;
  }
  if (methodName === 'temporarily' || methodName === 'commit' || methodName === 'rollBack' || methodName === 'toCss' || methodName === 'toPlainCss' || methodName === 'toArray' || methodName === 'toMatrix') {
    continue;
  }
  _fn();
}

Transforms_;

//# sourceMappingURL=data:application/json;base64,